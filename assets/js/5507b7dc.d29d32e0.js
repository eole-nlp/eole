"use strict";(self.webpackChunkdocusaurus_tsx=self.webpackChunkdocusaurus_tsx||[]).push([[7076],{738:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=t(4848),r=t(8453);const o={},a="Main Entrypoints",l={id:"reference/Config/run",title:"Main Entrypoints",description:"Common Base Config",source:"@site/docs/reference/Config/run.md",sourceDirName:"reference/Config",slug:"/reference/Config/run",permalink:"/eole/docs/reference/Config/run",draft:!1,unlisted:!1,editUrl:"https://github.com/eole-nlp/eole/tree/main/docs/docs/reference/Config/run.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Models",permalink:"/eole/docs/reference/Config/models"},next:{title:"Training",permalink:"/eole/docs/reference/Config/training"}},s={},d=[{value:"Common Base Config",id:"common-base-config",level:2},{value:"<em>pydantic model</em> eole.config.common.DistributedConfig[source]",id:"pydantic-model-eoleconfigcommondistributedconfigsource",level:3},{value:"<em>field</em> gpu_backend <em>: str</em> <em>= &#39;nccl&#39;</em>",id:"field-gpu_backend--str--nccl",level:4},{value:"<em>field</em> gpu_ranks <em>: List[int]</em> <em>= []</em>",id:"field-gpu_ranks--listint--",level:4},{value:"<em>field</em> gpu_verbose_level <em>: int</em> <em>= 0</em>",id:"field-gpu_verbose_level--int--0",level:4},{value:"<em>field</em> master_ip <em>: str</em> <em>= &#39;localhost&#39;</em>",id:"field-master_ip--str--localhost",level:4},{value:"<em>field</em> master_port <em>: int</em> <em>= 10000</em>",id:"field-master_port--int--10000",level:4},{value:"<em>field</em> parallel_mode <em>: Literal[&#39;data_parallel&#39;, &#39;tensor_parallel&#39;]</em> <em>= &#39;data_parallel&#39;</em>",id:"field-parallel_mode--literaldata_parallel-tensor_parallel--data_parallel",level:4},{value:"<em>field</em> timeout <em>: int</em> <em>= 60</em>",id:"field-timeout--int--60",level:4},{value:"<em>field</em> world_size <em>: int</em> <em>= 1</em>",id:"field-world_size--int--1",level:4},{value:"<em>property</em> parallel_gpu <em>: int</em>[source]",id:"property-parallel_gpu--intsource",level:4},{value:"<em>pydantic model</em> eole.config.common.LoggingConfig[source]",id:"pydantic-model-eoleconfigcommonloggingconfigsource",level:3},{value:"<em>field</em> dump_preds <em>: str | None</em> <em>= None</em>",id:"field-dump_preds--str--none--none",level:4},{value:"<em>field</em> log_file <em>: str</em> <em>= &#39;&#39;</em>",id:"field-log_file--str--",level:4},{value:"<em>field</em> report_every <em>: int</em> <em>= 50</em>",id:"field-report_every--int--50",level:4},{value:"<em>field</em> scoring_debug <em>: bool</em> <em>= False</em>",id:"field-scoring_debug--bool--false",level:4},{value:"<em>field</em> tensorboard <em>: bool</em> <em>= False</em>",id:"field-tensorboard--bool--false",level:4},{value:"<em>field</em> tensorboard_log_dir <em>: str</em> <em>= &#39;runs/eole&#39;</em>",id:"field-tensorboard_log_dir--str--runseole",level:4},{value:"<em>field</em> tensorboard_log_dir_dated <em>: str | None</em> <em>= None</em>",id:"field-tensorboard_log_dir_dated--str--none--none",level:4},{value:"<em>field</em> valid_metrics <em>: List[str]</em> <em>= []</em>",id:"field-valid_metrics--liststr--",level:4},{value:"<em>pydantic model</em> eole.config.common.LoRaConfig[source]",id:"pydantic-model-eoleconfigcommonloraconfigsource",level:3},{value:"<em>field</em> lora_alpha <em>: int</em> <em>= 1</em>",id:"field-lora_alpha--int--1",level:4},{value:"<em>field</em> lora_dropout <em>: float</em> <em>= 0.0</em>",id:"field-lora_dropout--float--00",level:4},{value:"<em>field</em> lora_embedding <em>: bool</em> <em>= False</em>",id:"field-lora_embedding--bool--false",level:4},{value:"<em>field</em> lora_layers <em>: List[str]</em> <em>= []</em>",id:"field-lora_layers--liststr--",level:4},{value:"<em>field</em> lora_rank <em>: int</em> <em>= 2</em>",id:"field-lora_rank--int--2",level:4},{value:"<em>pydantic model</em> eole.config.common.QuantizeConfig[source]",id:"pydantic-model-eoleconfigcommonquantizeconfigsource",level:3},{value:"<em>field</em> group_size <em>: int</em> <em>= 128</em>",id:"field-group_size--int--128",level:4},{value:"<em>field</em> quant_layers <em>: List[str]</em> <em>= []</em>",id:"field-quant_layers--liststr--",level:4},{value:"<em>field</em> quant_type <em>: Literal[&#39;&#39;, &#39;bnb_8bit&#39;, &#39;bnb_FP4&#39;, &#39;bnb_NF4&#39;, &#39;awq_gemm&#39;, &#39;awq_gemv&#39;]</em> <em>= &#39;&#39;</em>",id:"field-quant_type--literal-bnb_8bit-bnb_fp4-bnb_nf4-awq_gemm-awq_gemv--",level:4},{value:"<em>field</em> w_bit <em>: int</em> <em>= 4</em>",id:"field-w_bit--int--4",level:4},{value:"<em>pydantic model</em> eole.config.common.MiscConfig[source]",id:"pydantic-model-eoleconfigcommonmiscconfigsource",level:3},{value:"<em>field</em> seed <em>: int</em> <em>= -1</em>",id:"field-seed--int---1",level:4},{value:"Run Config",id:"run-config",level:2},{value:"<em>pydantic model</em> eole.config.run.TrainConfig[source]",id:"pydantic-model-eoleconfigruntrainconfigsource",level:3},{value:"<em>field</em> inference <em>: InferenceConfig | None</em> <em>= None</em>",id:"field-inference--inferenceconfig--none--none",level:4},{value:"<em>field</em> model <em>: TransformerModelConfig | TransformerLMModelConfig | TransformerEncoderModelConfig | RnnModelConfig | CnnModelConfig | CustomModelConfig | None</em> <em>= None</em>",id:"field-model--transformermodelconfig--transformerlmmodelconfig--transformerencodermodelconfig--rnnmodelconfig--cnnmodelconfig--custommodelconfig--none--none",level:4},{value:"<em>field</em> n_sample <em>: int</em> <em>= 0</em>",id:"field-n_sample--int--0",level:4},{value:"<em>field</em> training <em>: TrainingConfig | None</em> <em>[Optional]</em>",id:"field-training--trainingconfig--none-optional",level:4},{value:"<em>field</em> verbose <em>: bool</em> <em>= False</em>",id:"field-verbose--bool--false",level:4},{value:"<em>validator</em> default_architecture  <em>\xbb</em>  <em>all fields</em>[source]",id:"validator-default_architecture----all-fieldssource",level:4},{value:"<em>classmethod</em> get_defaults(architecture)[source]",id:"classmethod-get_defaultsarchitecturesource",level:4},{value:"get_model_path()[source]",id:"get_model_pathsource",level:4},{value:"model_post_init(context: Any, /)",id:"model_post_initcontext-any-",level:4},{value:"<em>validator</em> str_to_dict  <em>\xbb</em>  <em>model</em> <em>,</em> <em>training</em>[source]",id:"validator-str_to_dict----model--trainingsource",level:4},{value:"<em>pydantic model</em> eole.config.run.PredictConfig[source]",id:"pydantic-model-eoleconfigrunpredictconfigsource",level:3},{value:"<em>field</em> engine <em>: str</em> <em>= &#39;eole&#39;</em>",id:"field-engine--str--eole",level:4},{value:"<em>field</em> model <em>: TransformerModelConfig | TransformerLMModelConfig | TransformerEncoderModelConfig | RnnModelConfig | CnnModelConfig | CustomModelConfig | None</em> <em>= None</em>",id:"field-model--transformermodelconfig--transformerlmmodelconfig--transformerencodermodelconfig--rnnmodelconfig--cnnmodelconfig--custommodelconfig--none--none-1",level:4},{value:"<em>field</em> model_path <em>: str | List[str]</em> <em>[Required]</em>",id:"field-model_path--str--liststr-required",level:4},{value:"<em>field</em> output <em>: str</em> <em>= &#39;pred.txt&#39;</em>",id:"field-output--str--predtxt",level:4},{value:"<em>field</em> share_vocab <em>: bool | None</em> <em>= False</em>",id:"field-share_vocab--bool--none--false",level:4},{value:"<em>field</em> src <em>: str</em> <em>[Required]</em>",id:"field-src--str-required",level:4},{value:"<em>field</em> src_subword_vocab <em>: str | None</em> <em>= None</em>",id:"field-src_subword_vocab--str--none--none",level:4},{value:"<em>field</em> tgt <em>: str | None</em> <em>= None</em>",id:"field-tgt--str--none--none",level:4},{value:"<em>field</em> tgt_file_prefix <em>: bool</em> <em>= False</em>",id:"field-tgt_file_prefix--bool--false",level:4},{value:"<em>field</em> transforms <em>: List[str] | None</em> <em>= []</em>",id:"field-transforms--liststr--none--",level:4},{value:"<em>field</em> transforms_configs <em>: NestedAllTransformsConfig | None</em> <em>[Optional]</em>",id:"field-transforms_configs--nestedalltransformsconfig--none-optional",level:4},{value:"model_post_init(context: Any, /)",id:"model_post_initcontext-any--1",level:4},{value:"<em>pydantic model</em> eole.config.run.BuildVocabConfig[source]",id:"pydantic-model-eoleconfigrunbuildvocabconfigsource",level:3},{value:"<em>field</em> dump_samples <em>: bool</em> <em>= False</em>",id:"field-dump_samples--bool--false",level:4},{value:"<em>field</em> learn_subwords <em>: bool</em> <em>= False</em>",id:"field-learn_subwords--bool--false",level:4},{value:"<em>field</em> learn_subwords_size <em>: int</em> <em>= 32000</em>",id:"field-learn_subwords_size--int--32000",level:4},{value:"<em>field</em> n_sample <em>: int</em> <em>= 5000</em>",id:"field-n_sample--int--5000",level:4},{value:"<em>field</em> num_threads <em>: int</em> <em>= 1</em>",id:"field-num_threads--int--1",level:4},{value:"<em>field</em> vocab_sample_queue_size <em>: int</em> <em>= 20</em>",id:"field-vocab_sample_queue_size--int--20",level:4},{value:"model_post_init(context: Any, /)",id:"model_post_initcontext-any--2",level:4}];function f(n){const e={a:"a",code:"code",details:"details",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",summary:"summary",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"main-entrypoints",children:"Main Entrypoints"}),"\n",(0,i.jsx)(e.h2,{id:"common-base-config",children:"Common Base Config"}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigcommondistributedconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.common.DistributedConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/common.py#L11-L51",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.code,{children:"Config"})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "DistributedConfig",\n   "type": "object",\n   "properties": {\n      "gpu_ranks": {\n         "default": [],\n         "description": "List of ranks for each process.",\n         "items": {\n            "type": "integer"\n         },\n         "title": "Gpu Ranks",\n         "type": "array"\n      },\n      "world_size": {\n         "default": 1,\n         "description": "Total number of distributed processes.",\n         "title": "World Size",\n         "type": "integer"\n      },\n      "parallel_mode": {\n         "default": "data_parallel",\n         "description": "Distributed mode.",\n         "enum": [\n            "data_parallel",\n            "tensor_parallel"\n         ],\n         "title": "Parallel Mode",\n         "type": "string"\n      },\n      "gpu_backend": {\n         "default": "nccl",\n         "description": "Type of torch distributed backend.",\n         "title": "Gpu Backend",\n         "type": "string"\n      },\n      "gpu_verbose_level": {\n         "default": 0,\n         "description": "Gives more info on each process per GPU.",\n         "title": "Gpu Verbose Level",\n         "type": "integer"\n      },\n      "master_ip": {\n         "default": "localhost",\n         "description": "IP of master for torch.distributed training.",\n         "title": "Master Ip",\n         "type": "string"\n      },\n      "master_port": {\n         "default": 10000,\n         "description": "Port of master for torch.distributed training.",\n         "title": "Master Port",\n         "type": "integer"\n      },\n      "timeout": {\n         "default": 60,\n         "description": "Timeout for one GPU to wait for the others.",\n         "title": "Timeout",\n         "type": "integer"\n      }\n   },\n   "additionalProperties": false\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = forbid"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.gpu_backend",children:(0,i.jsx)(e.code,{children:"gpu_backend (str)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.gpu_ranks",children:(0,i.jsx)(e.code,{children:"gpu_ranks (List[int])"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.gpu_verbose_level",children:(0,i.jsx)(e.code,{children:"gpu_verbose_level (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.master_ip",children:(0,i.jsx)(e.code,{children:"master_ip (str)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.master_port",children:(0,i.jsx)(e.code,{children:"master_port (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.parallel_mode",children:(0,i.jsx)(e.code,{children:"parallel_mode (Literal['data_parallel', 'tensor_parallel'])"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.timeout",children:(0,i.jsx)(e.code,{children:"timeout (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.DistributedConfig.world_size",children:(0,i.jsx)(e.code,{children:"world_size (int)"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-gpu_backend--str--nccl",children:[(0,i.jsx)(e.em,{children:"field"})," gpu_backend ",(0,i.jsx)(e.em,{children:": str"})," ",(0,i.jsx)(e.em,{children:"= 'nccl'"})]}),"\n",(0,i.jsx)(e.p,{children:"Type of torch distributed backend."}),"\n",(0,i.jsxs)(e.h4,{id:"field-gpu_ranks--listint--",children:[(0,i.jsx)(e.em,{children:"field"})," gpu_ranks ",(0,i.jsx)(e.em,{children:": List[int]"})," ",(0,i.jsx)(e.em,{children:"= []"})]}),"\n",(0,i.jsx)(e.p,{children:"List of ranks for each process."}),"\n",(0,i.jsxs)(e.h4,{id:"field-gpu_verbose_level--int--0",children:[(0,i.jsx)(e.em,{children:"field"})," gpu_verbose_level ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 0"})]}),"\n",(0,i.jsx)(e.p,{children:"Gives more info on each process per GPU."}),"\n",(0,i.jsxs)(e.h4,{id:"field-master_ip--str--localhost",children:[(0,i.jsx)(e.em,{children:"field"})," master_ip ",(0,i.jsx)(e.em,{children:": str"})," ",(0,i.jsx)(e.em,{children:"= 'localhost'"})]}),"\n",(0,i.jsx)(e.p,{children:"IP of master for torch.distributed training."}),"\n",(0,i.jsxs)(e.h4,{id:"field-master_port--int--10000",children:[(0,i.jsx)(e.em,{children:"field"})," master_port ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 10000"})]}),"\n",(0,i.jsx)(e.p,{children:"Port of master for torch.distributed training."}),"\n",(0,i.jsxs)(e.h4,{id:"field-parallel_mode--literaldata_parallel-tensor_parallel--data_parallel",children:[(0,i.jsx)(e.em,{children:"field"})," parallel_mode ",(0,i.jsx)(e.em,{children:": Literal['data_parallel', 'tensor_parallel']"})," ",(0,i.jsx)(e.em,{children:"= 'data_parallel'"})]}),"\n",(0,i.jsx)(e.p,{children:"Distributed mode."}),"\n",(0,i.jsxs)(e.h4,{id:"field-timeout--int--60",children:[(0,i.jsx)(e.em,{children:"field"})," timeout ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 60"})]}),"\n",(0,i.jsx)(e.p,{children:"Timeout for one GPU to wait for the others."}),"\n",(0,i.jsxs)(e.h4,{id:"field-world_size--int--1",children:[(0,i.jsx)(e.em,{children:"field"})," world_size ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 1"})]}),"\n",(0,i.jsx)(e.p,{children:"Total number of distributed processes."}),"\n",(0,i.jsxs)(e.h4,{id:"property-parallel_gpu--intsource",children:[(0,i.jsx)(e.em,{children:"property"})," parallel_gpu ",(0,i.jsx)(e.em,{children:": int"}),(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/common.py#L37-L39",children:"[source]"})]}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigcommonloggingconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.common.LoggingConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/common.py#L98-L124",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.code,{children:"Config"})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "LoggingConfig",\n   "type": "object",\n   "properties": {\n      "log_file": {\n         "default": "",\n         "description": "Output logs to a file under this path.",\n         "title": "Log File",\n         "type": "string"\n      },\n      "report_every": {\n         "default": 50,\n         "description": "Print stats at this interval (in steps).",\n         "title": "Report Every",\n         "type": "integer"\n      },\n      "valid_metrics": {\n         "default": [],\n         "description": "List of names of additional validation metrics.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Valid Metrics",\n         "type": "array"\n      },\n      "scoring_debug": {\n         "default": false,\n         "description": "Dump src/ref/pred of the current batch.",\n         "title": "Scoring Debug",\n         "type": "boolean"\n      },\n      "dump_preds": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Folder to dump predictions to.",\n         "title": "Dump Preds"\n      },\n      "tensorboard": {\n         "default": false,\n         "description": "Use tensorboard for visualization during training.",\n         "title": "Tensorboard",\n         "type": "boolean"\n      },\n      "tensorboard_log_dir": {\n         "default": "runs/eole",\n         "description": "Log directory for tensorboard (also the name of the run).",\n         "title": "Tensorboard Log Dir",\n         "type": "string"\n      },\n      "tensorboard_log_dir_dated": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "title": "Tensorboard Log Dir Dated"\n      }\n   },\n   "additionalProperties": false\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = forbid"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.dump_preds",children:(0,i.jsx)(e.code,{children:"dump_preds (str | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.log_file",children:(0,i.jsx)(e.code,{children:"log_file (str)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.report_every",children:(0,i.jsx)(e.code,{children:"report_every (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.scoring_debug",children:(0,i.jsx)(e.code,{children:"scoring_debug (bool)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.tensorboard",children:(0,i.jsx)(e.code,{children:"tensorboard (bool)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.tensorboard_log_dir",children:(0,i.jsx)(e.code,{children:"tensorboard_log_dir (str)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.tensorboard_log_dir_dated",children:(0,i.jsx)(e.code,{children:"tensorboard_log_dir_dated (str | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig.valid_metrics",children:(0,i.jsx)(e.code,{children:"valid_metrics (List[str])"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-dump_preds--str--none--none",children:[(0,i.jsx)(e.em,{children:"field"})," dump_preds ",(0,i.jsx)(e.em,{children:": str | None"})," ",(0,i.jsx)(e.em,{children:"= None"})]}),"\n",(0,i.jsx)(e.p,{children:"Folder to dump predictions to."}),"\n",(0,i.jsxs)(e.h4,{id:"field-log_file--str--",children:[(0,i.jsx)(e.em,{children:"field"})," log_file ",(0,i.jsx)(e.em,{children:": str"})," ",(0,i.jsx)(e.em,{children:"= ''"})]}),"\n",(0,i.jsx)(e.p,{children:"Output logs to a file under this path."}),"\n",(0,i.jsxs)(e.h4,{id:"field-report_every--int--50",children:[(0,i.jsx)(e.em,{children:"field"})," report_every ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 50"})]}),"\n",(0,i.jsx)(e.p,{children:"Print stats at this interval (in steps)."}),"\n",(0,i.jsxs)(e.h4,{id:"field-scoring_debug--bool--false",children:[(0,i.jsx)(e.em,{children:"field"})," scoring_debug ",(0,i.jsx)(e.em,{children:": bool"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsx)(e.p,{children:"Dump src/ref/pred of the current batch."}),"\n",(0,i.jsxs)(e.h4,{id:"field-tensorboard--bool--false",children:[(0,i.jsx)(e.em,{children:"field"})," tensorboard ",(0,i.jsx)(e.em,{children:": bool"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsx)(e.p,{children:"Use tensorboard for visualization during training."}),"\n",(0,i.jsxs)(e.h4,{id:"field-tensorboard_log_dir--str--runseole",children:[(0,i.jsx)(e.em,{children:"field"})," tensorboard_log_dir ",(0,i.jsx)(e.em,{children:": str"})," ",(0,i.jsx)(e.em,{children:"= 'runs/eole'"})]}),"\n",(0,i.jsx)(e.p,{children:"Log directory for tensorboard (also the name of the run)."}),"\n",(0,i.jsxs)(e.h4,{id:"field-tensorboard_log_dir_dated--str--none--none",children:[(0,i.jsx)(e.em,{children:"field"})," tensorboard_log_dir_dated ",(0,i.jsx)(e.em,{children:": str | None"})," ",(0,i.jsx)(e.em,{children:"= None"})]}),"\n",(0,i.jsxs)(e.h4,{id:"field-valid_metrics--liststr--",children:[(0,i.jsx)(e.em,{children:"field"})," valid_metrics ",(0,i.jsx)(e.em,{children:": List[str]"})," ",(0,i.jsx)(e.em,{children:"= []"})]}),"\n",(0,i.jsx)(e.p,{children:"List of names of additional validation metrics."}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigcommonloraconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.common.LoRaConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/common.py#L54-L72",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.code,{children:"Config"})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "LoRaConfig",\n   "type": "object",\n   "properties": {\n      "lora_layers": {\n         "default": [],\n         "description": "List of layers to be replaced by LoRa layers. E.g. [\'linear_values\', \'linear_query\'] (\\u00a74.2 in https://arxiv.org/abs/2106.09685)",\n         "items": {\n            "type": "string"\n         },\n         "title": "Lora Layers",\n         "type": "array"\n      },\n      "lora_embedding": {\n         "default": false,\n         "description": "Replace embeddings with LoRa Embeddings (\\u00a75.1)",\n         "title": "Lora Embedding",\n         "type": "boolean"\n      },\n      "lora_rank": {\n         "default": 2,\n         "description": "r=2 successfully tested with NLLB-200 3.3B",\n         "title": "Lora Rank",\n         "type": "integer"\n      },\n      "lora_alpha": {\n         "default": 1,\n         "description": "\\u00a74.1 https://arxiv.org/abs/2106.09685",\n         "title": "Lora Alpha",\n         "type": "integer"\n      },\n      "lora_dropout": {\n         "default": 0.0,\n         "description": "Rule of thumb: same value as in main model.",\n         "title": "Lora Dropout",\n         "type": "number"\n      }\n   },\n   "additionalProperties": false\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = forbid"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoRaConfig.lora_alpha",children:(0,i.jsx)(e.code,{children:"lora_alpha (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoRaConfig.lora_dropout",children:(0,i.jsx)(e.code,{children:"lora_dropout (float)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoRaConfig.lora_embedding",children:(0,i.jsx)(e.code,{children:"lora_embedding (bool)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoRaConfig.lora_layers",children:(0,i.jsx)(e.code,{children:"lora_layers (List[str])"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.LoRaConfig.lora_rank",children:(0,i.jsx)(e.code,{children:"lora_rank (int)"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-lora_alpha--int--1",children:[(0,i.jsx)(e.em,{children:"field"})," lora_alpha ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 1"})]}),"\n",(0,i.jsxs)(e.p,{children:["\xa74.1 ",(0,i.jsx)(e.a,{href:"https://arxiv.org/abs/2106.09685",children:"https://arxiv.org/abs/2106.09685"})]}),"\n",(0,i.jsxs)(e.h4,{id:"field-lora_dropout--float--00",children:[(0,i.jsx)(e.em,{children:"field"})," lora_dropout ",(0,i.jsx)(e.em,{children:": float"})," ",(0,i.jsx)(e.em,{children:"= 0.0"})]}),"\n",(0,i.jsx)(e.p,{children:"Rule of thumb: same value as in main model."}),"\n",(0,i.jsxs)(e.h4,{id:"field-lora_embedding--bool--false",children:[(0,i.jsx)(e.em,{children:"field"})," lora_embedding ",(0,i.jsx)(e.em,{children:": bool"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsx)(e.p,{children:"Replace embeddings with LoRa Embeddings (\xa75.1)"}),"\n",(0,i.jsxs)(e.h4,{id:"field-lora_layers--liststr--",children:[(0,i.jsx)(e.em,{children:"field"})," lora_layers ",(0,i.jsx)(e.em,{children:": List[str]"})," ",(0,i.jsx)(e.em,{children:"= []"})]}),"\n",(0,i.jsxs)(e.p,{children:["List of layers to be replaced by LoRa layers. E.g. [\u2018linear_values\u2019, \u2018linear_query\u2019] (\xa74.2 in ",(0,i.jsx)(e.a,{href:"https://arxiv.org/abs/2106.09685",children:"https://arxiv.org/abs/2106.09685"}),")"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-lora_rank--int--2",children:[(0,i.jsx)(e.em,{children:"field"})," lora_rank ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 2"})]}),"\n",(0,i.jsx)(e.p,{children:"r=2 successfully tested with NLLB-200 3.3B"}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigcommonquantizeconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.common.QuantizeConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/common.py#L75-L86",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.code,{children:"Config"})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "QuantizeConfig",\n   "type": "object",\n   "properties": {\n      "quant_layers": {\n         "default": [],\n         "description": "List of layers to be compressed in 4/8bit.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Quant Layers",\n         "type": "array"\n      },\n      "quant_type": {\n         "default": "",\n         "description": "Type of compression.",\n         "enum": [\n            "",\n            "bnb_8bit",\n            "bnb_FP4",\n            "bnb_NF4",\n            "awq_gemm",\n            "awq_gemv"\n         ],\n         "title": "Quant Type",\n         "type": "string"\n      },\n      "w_bit": {\n         "default": 4,\n         "description": "W_bit quantization",\n         "title": "W Bit",\n         "type": "integer"\n      },\n      "group_size": {\n         "default": 128,\n         "description": "Group size quantization.",\n         "title": "Group Size",\n         "type": "integer"\n      }\n   },\n   "additionalProperties": false\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = forbid"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.QuantizeConfig.group_size",children:(0,i.jsx)(e.code,{children:"group_size (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.QuantizeConfig.quant_layers",children:(0,i.jsx)(e.code,{children:"quant_layers (List[str])"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.QuantizeConfig.quant_type",children:(0,i.jsx)(e.code,{children:"quant_type (Literal['', 'bnb_8bit', 'bnb_FP4', 'bnb_NF4', 'awq_gemm', 'awq_gemv'])"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.QuantizeConfig.w_bit",children:(0,i.jsx)(e.code,{children:"w_bit (int)"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-group_size--int--128",children:[(0,i.jsx)(e.em,{children:"field"})," group_size ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 128"})]}),"\n",(0,i.jsx)(e.p,{children:"Group size quantization."}),"\n",(0,i.jsxs)(e.h4,{id:"field-quant_layers--liststr--",children:[(0,i.jsx)(e.em,{children:"field"})," quant_layers ",(0,i.jsx)(e.em,{children:": List[str]"})," ",(0,i.jsx)(e.em,{children:"= []"})]}),"\n",(0,i.jsx)(e.p,{children:"List of layers to be compressed in 4/8bit."}),"\n",(0,i.jsxs)(e.h4,{id:"field-quant_type--literal-bnb_8bit-bnb_fp4-bnb_nf4-awq_gemm-awq_gemv--",children:[(0,i.jsx)(e.em,{children:"field"})," quant_type ",(0,i.jsx)(e.em,{children:": Literal['', 'bnb_8bit', 'bnb_FP4', 'bnb_NF4', 'awq_gemm', 'awq_gemv']"})," ",(0,i.jsx)(e.em,{children:"= ''"})]}),"\n",(0,i.jsx)(e.p,{children:"Type of compression."}),"\n",(0,i.jsxs)(e.h4,{id:"field-w_bit--int--4",children:[(0,i.jsx)(e.em,{children:"field"})," w_bit ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 4"})]}),"\n",(0,i.jsx)(e.p,{children:"W_bit quantization"}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigcommonmiscconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.common.MiscConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/common.py#L89-L95",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.code,{children:"Config"})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "MiscConfig",\n   "type": "object",\n   "properties": {\n      "seed": {\n         "default": -1,\n         "description": "Set random seed used for better reproducibility between experiments.",\n         "title": "Seed",\n         "type": "integer"\n      }\n   },\n   "additionalProperties": false\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = forbid"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.common.MiscConfig.seed",children:(0,i.jsx)(e.code,{children:"seed (int)"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-seed--int---1",children:[(0,i.jsx)(e.em,{children:"field"})," seed ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= -1"})]}),"\n",(0,i.jsx)(e.p,{children:"Set random seed used for better reproducibility between experiments."}),"\n",(0,i.jsx)(e.h2,{id:"run-config",children:"Run Config"}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigruntrainconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.run.TrainConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/run.py#L22-L85",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig",children:(0,i.jsx)(e.code,{children:"LoggingConfig"})}),", ",(0,i.jsx)(e.a,{href:"#eole.config.common.MiscConfig",children:(0,i.jsx)(e.code,{children:"MiscConfig"})}),", ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/data#eole.config.data.DataConfig",children:(0,i.jsx)(e.code,{children:"DataConfig"})}),", ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/data#eole.config.data.VocabConfig",children:(0,i.jsx)(e.code,{children:"VocabConfig"})})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "TrainConfig",\n   "type": "object",\n   "properties": {\n      "src_vocab": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "description": "Path to src (or shared) vocabulary file. Format: one <word> or <word>\\t<count> per line.",\n         "title": "Src Vocab"\n      },\n      "tgt_vocab": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to tgt vocabulary file. Format: one <word> or <word>\\t<count> per line.",\n         "title": "Tgt Vocab"\n      },\n      "share_vocab": {\n         "default": false,\n         "description": "Share source and target vocabulary.",\n         "title": "Share Vocab",\n         "type": "boolean"\n      },\n      "decoder_start_token": {\n         "default": "&lt;s&gt;",\n         "description": "Default decoder start token. For most models it is &lt;s&gt; = BOS. Some fairseq models require &lt;/s&gt;.",\n         "title": "Decoder Start Token",\n         "type": "string"\n      },\n      "bos_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "&lt;s&gt;",\n         "title": "Bos Token"\n      },\n      "eos_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "&lt;/s&gt;",\n         "title": "Eos Token"\n      },\n      "unk_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "<unk>",\n         "title": "Unk Token"\n      },\n      "pad_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "<blank>",\n         "title": "Pad Token"\n      },\n      "both_embeddings": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to the embeddings file to use for both source and target tokens.",\n         "title": "Both Embeddings"\n      },\n      "src_embeddings": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to the embeddings file to use for source tokens.",\n         "title": "Src Embeddings"\n      },\n      "tgt_embeddings": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to the embeddings file to use for target tokens.",\n         "title": "Tgt Embeddings"\n      },\n      "embeddings_type": {\n         "anyOf": [\n            {\n               "enum": [\n                  "GloVe",\n                  "word2vec"\n               ],\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Type of embeddings file.",\n         "title": "Embeddings Type"\n      },\n      "src_vocab_size": {\n         "default": 32758,\n         "description": "Maximum size of the source vocabulary.",\n         "title": "Src Vocab Size",\n         "type": "integer"\n      },\n      "tgt_vocab_size": {\n         "default": 32768,\n         "description": "Maximum size of the target vocabulary.",\n         "title": "Tgt Vocab Size",\n         "type": "integer"\n      },\n      "vocab_size_multiple": {\n         "default": 8,\n         "description": "Make the vocabulary size a multiple of this value. (Adds dummy tokens if needed.)",\n         "title": "Vocab Size Multiple",\n         "type": "integer"\n      },\n      "src_words_min_frequency": {\n         "default": 0,\n         "description": "Discard source words with lower frequency.",\n         "title": "Src Words Min Frequency",\n         "type": "integer"\n      },\n      "tgt_words_min_frequency": {\n         "default": 0,\n         "description": "Discard target words with lower frequency.",\n         "title": "Tgt Words Min Frequency",\n         "type": "integer"\n      },\n      "data": {\n         "anyOf": [\n            {\n               "additionalProperties": {\n                  "$ref": "#/$defs/Dataset"\n               },\n               "type": "object"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "description": "All datasets and their specifications. See examples/*.yaml for further details.",\n         "title": "Data"\n      },\n      "transforms": {\n         "default": [],\n         "description": "Default transform pipeline to apply to data. Can be specified in each corpus of data to override.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Transforms",\n         "type": "array"\n      },\n      "transforms_configs": {\n         "anyOf": [\n            {\n               "$ref": "#/$defs/NestedAllTransformsConfig"\n            },\n            {\n               "type": "null"\n            }\n         ]\n      },\n      "skip_empty_level": {\n         "default": "warning",\n         "description": "Logging level when encoutering empty examples. (silent: silently ignore/skip empty examples, warning: warn when ignoring/skipping empty examples, error: raise an error and stop execution when any empty example)",\n         "enum": [\n            "silent",\n            "warning",\n            "error"\n         ],\n         "title": "Skip Empty Level",\n         "type": "string"\n      },\n      "n_sample": {\n         "default": 0,\n         "description": "Number of transformed samples per corpus to use to build the vocabulary. Set to -1 to use the full corpora.",\n         "title": "N Sample",\n         "type": "integer"\n      },\n      "save_data": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Output base path for objects that will be saved (vocab, transforms, embeddings, ...)",\n         "title": "Save Data"\n      },\n      "overwrite": {\n         "default": false,\n         "description": "Overwrite existing objects if any.",\n         "title": "Overwrite",\n         "type": "boolean"\n      },\n      "seed": {\n         "default": -1,\n         "description": "Set random seed used for better reproducibility between experiments.",\n         "title": "Seed",\n         "type": "integer"\n      },\n      "log_file": {\n         "default": "",\n         "description": "Output logs to a file under this path.",\n         "title": "Log File",\n         "type": "string"\n      },\n      "report_every": {\n         "default": 50,\n         "description": "Print stats at this interval (in steps).",\n         "title": "Report Every",\n         "type": "integer"\n      },\n      "valid_metrics": {\n         "default": [],\n         "description": "List of names of additional validation metrics.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Valid Metrics",\n         "type": "array"\n      },\n      "scoring_debug": {\n         "default": false,\n         "description": "Dump src/ref/pred of the current batch.",\n         "title": "Scoring Debug",\n         "type": "boolean"\n      },\n      "dump_preds": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Folder to dump predictions to.",\n         "title": "Dump Preds"\n      },\n      "tensorboard": {\n         "default": false,\n         "description": "Use tensorboard for visualization during training.",\n         "title": "Tensorboard",\n         "type": "boolean"\n      },\n      "tensorboard_log_dir": {\n         "default": "runs/eole",\n         "description": "Log directory for tensorboard (also the name of the run).",\n         "title": "Tensorboard Log Dir",\n         "type": "string"\n      },\n      "tensorboard_log_dir_dated": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "title": "Tensorboard Log Dir Dated"\n      },\n      "verbose": {\n         "default": false,\n         "description": "Print data loading and statistics for all process (default only logs the first process shard).",\n         "title": "Verbose",\n         "type": "boolean"\n      },\n      "model": {\n         "anyOf": [\n            {\n               "discriminator": {\n                  "mapping": {\n                     "cnn": "#/$defs/CnnModelConfig",\n                     "custom": "#/$defs/CustomModelConfig",\n                     "rnn": "#/$defs/RnnModelConfig",\n                     "transformer": "#/$defs/TransformerModelConfig",\n                     "transformer_encoder": "#/$defs/TransformerEncoderModelConfig",\n                     "transformer_lm": "#/$defs/TransformerLMModelConfig"\n                  },\n                  "propertyName": "architecture"\n               },\n               "oneOf": [\n                  {\n                     "$ref": "#/$defs/TransformerModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/TransformerLMModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/TransformerEncoderModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/RnnModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/CnnModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/CustomModelConfig"\n                  }\n               ]\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "title": "Model"\n      },\n      "training": {\n         "anyOf": [\n            {\n               "$ref": "#/$defs/TrainingConfig"\n            },\n            {\n               "type": "null"\n            }\n         ]\n      },\n      "inference": {\n         "anyOf": [\n            {\n               "$ref": "#/$defs/InferenceConfig"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null\n      }\n   },\n   "$defs": {\n      "ActivationFunction": {\n         "enum": [\n            "relu",\n            "gelu",\n            "silu",\n            "gated-gelu",\n            "gated-silu"\n         ],\n         "title": "ActivationFunction",\n         "type": "string"\n      },\n      "BARTNoiseConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "permute_sent_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Permute this proportion of sentences (boundaries defined by [\'.\', \'?\', \'!\']) in all inputs.",\n               "title": "Permute Sent Ratio"\n            },\n            "rotate_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Rotate this proportion of inputs.",\n               "title": "Rotate Ratio"\n            },\n            "insert_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Insert this percentage of additional random tokens.",\n               "title": "Insert Ratio"\n            },\n            "random_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Instead of using <mask>, use random token this often.",\n               "title": "Random Ratio"\n            },\n            "mask_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Fraction of words/subwords that will be masked.",\n               "title": "Mask Ratio"\n            },\n            "mask_length": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "subword",\n                        "word",\n                        "span-poisson"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "subword",\n               "description": "Length of masking window to apply.",\n               "title": "Mask Length"\n            },\n            "poisson_lambda": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3.0,\n               "description": "Lambda for Poisson distribution to sample span length if `-mask_length` set to span-poisson.",\n               "title": "Poisson Lambda"\n            },\n            "replace_length": {\n               "anyOf": [\n                  {\n                     "maximum": 1,\n                     "minimum": -1,\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": -1,\n               "description": "When masking N tokens, replace with 0, 1, or N tokens. (use -1 for N)",\n               "title": "Replace Length"\n            }\n         },\n         "title": "BARTNoiseConfig",\n         "type": "object"\n      },\n      "BaseTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for src (or shared).",\n               "title": "Src Subword Model"\n            },\n            "tgt_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for tgt.",\n               "title": "Tgt Subword Model"\n            },\n            "src_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (source side)",\n               "title": "Src Subword Nbest"\n            },\n            "tgt_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (target side)",\n               "title": "Tgt Subword Nbest"\n            },\n            "src_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (source side)",\n               "title": "Src Subword Alpha"\n            },\n            "tgt_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (target side)",\n               "title": "Tgt Subword Alpha"\n            },\n            "src_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for src subword. Format: <word>\\\\t<count> per line.",\n               "title": "Src Subword Vocab"\n            },\n            "tgt_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for tgt subword. Format: <word>\\\\t<count> per line.",\n               "title": "Tgt Subword Vocab"\n            },\n            "src_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce src subword in src_subword_vocab with frequency >= src_vocab_threshold.",\n               "title": "Src Vocab Threshold"\n            },\n            "tgt_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce tgt subword in tgt_subword_vocab with frequency >= tgt_vocab_threshold.",\n               "title": "Tgt Vocab Threshold"\n            }\n         },\n         "title": "BaseTokenizerConfig",\n         "type": "object"\n      },\n      "CleanConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_eq_tgt": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex src==tgt",\n               "title": "Src Eq Tgt"\n            },\n            "same_char": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex with same char more than 4 times",\n               "title": "Same Char"\n            },\n            "same_word": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex with same word more than 3 times",\n               "title": "Same Word"\n            },\n            "scripts_ok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Latin",\n                  "Common"\n               ],\n               "description": "list of unicodata scripts accepted",\n               "title": "Scripts Ok"\n            },\n            "scripts_nok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "description": "list of unicodata scripts not accepted",\n               "title": "Scripts Nok"\n            },\n            "src_tgt_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 2.0,\n               "description": "ratio between src and tgt",\n               "title": "Src Tgt Ratio"\n            },\n            "avg_tok_min": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3.0,\n               "description": "average length of tokens min",\n               "title": "Avg Tok Min"\n            },\n            "avg_tok_max": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 20.0,\n               "description": "average length of tokens max",\n               "title": "Avg Tok Max"\n            },\n            "langid": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "description": "list of languages accepted",\n               "title": "Langid"\n            }\n         },\n         "title": "CleanConfig",\n         "type": "object"\n      },\n      "CnnDecoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "decoder_type": {\n               "const": "cnn",\n               "default": "cnn",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "cnn_kernel_width": {\n               "default": 3,\n               "description": "Size of windows in the cnn, the kernel_size is (cnn_kernel_width, 1) in convolution layers.",\n               "title": "Cnn Kernel Width",\n               "type": "integer"\n            }\n         },\n         "title": "CnnDecoderConfig",\n         "type": "object"\n      },\n      "CnnEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "const": "cnn",\n               "default": "cnn",\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "cnn_kernel_width": {\n               "default": 3,\n               "description": "Size of windows in the cnn, the kernel_size is (cnn_kernel_width, 1) in convolution layers.",\n               "title": "Cnn Kernel Width",\n               "type": "integer"\n            }\n         },\n         "title": "CnnEncoderConfig",\n         "type": "object"\n      },\n      "CnnModelConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": -1,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "cnn",\n               "default": "cnn",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "cnn_kernel_width": {\n               "default": 3,\n               "description": "Size of windows in the cnn, the kernel_size is (cnn_kernel_width, 1) in convolution layers.",\n               "title": "Cnn Kernel Width",\n               "type": "integer"\n            }\n         },\n         "title": "CnnModelConfig",\n         "type": "object"\n      },\n      "CustomModelConfig": {\n         "additionalProperties": false,\n         "description": "Wrap anything that does not fit a set common architecture.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": -1,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "custom",\n               "default": "custom",\n               "title": "Architecture",\n               "type": "string"\n            }\n         },\n         "title": "CustomModelConfig",\n         "type": "object"\n      },\n      "Dataset": {\n         "additionalProperties": false,\n         "properties": {\n            "name": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Name"\n            },\n            "weight": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "title": "Weight"\n            },\n            "transforms": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Transforms"\n            },\n            "path_src": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Src"\n            },\n            "path_tgt": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Tgt"\n            },\n            "path_sco": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Sco"\n            },\n            "path_txt": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Txt"\n            },\n            "path_align": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Align"\n            },\n            "src_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Src Prefix"\n            },\n            "tgt_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Tgt Prefix"\n            },\n            "src_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Src Suffix"\n            },\n            "tgt_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Tgt Suffix"\n            },\n            "src_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Src Lang"\n            },\n            "tgt_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Tgt Lang"\n            },\n            "penn": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Penn"\n            },\n            "norm_quote_commas": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Norm Quote Commas"\n            },\n            "norm_numbers": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Norm Numbers"\n            },\n            "pre_replace_unicode_punct": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "title": "Pre Replace Unicode Punct"\n            },\n            "post_remove_control_chars": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "title": "Post Remove Control Chars"\n            },\n            "src_eq_tgt": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Src Eq Tgt"\n            },\n            "same_char": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Same Char"\n            },\n            "same_word": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Same Word"\n            },\n            "scripts_ok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Latin",\n                  "Common"\n               ],\n               "title": "Scripts Ok"\n            },\n            "scripts_nok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "title": "Scripts Nok"\n            },\n            "src_tgt_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 2,\n               "title": "Src Tgt Ratio"\n            },\n            "avg_tok_min": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3,\n               "title": "Avg Tok Min"\n            },\n            "avg_tok_max": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 20,\n               "title": "Avg Tok Max"\n            },\n            "lang_id": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "en",\n                  "fr"\n               ],\n               "title": "Lang Id"\n            }\n         },\n         "title": "Dataset",\n         "type": "object"\n      },\n      "DocifyConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "doc_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 200,\n               "description": "Number of tokens per doc.",\n               "title": "Doc Length"\n            },\n            "max_context": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Max context segments.",\n               "title": "Max Context"\n            }\n         },\n         "title": "DocifyConfig",\n         "type": "object"\n      },\n      "EmbeddingsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "freeze_word_vecs_enc": {\n               "default": false,\n               "description": "Freeze word embeddings on the encoder side.",\n               "title": "Freeze Word Vecs Enc",\n               "type": "boolean"\n            },\n            "freeze_word_vecs_dec": {\n               "default": false,\n               "description": "Freeze word embeddings on the encoder side.",\n               "title": "Freeze Word Vecs Dec",\n               "type": "boolean"\n            },\n            "position_encoding": {\n               "default": false,\n               "description": "Absolute position encoding, see position_encoding_type. Necessary for non-RNN style models.",\n               "title": "Position Encoding",\n               "type": "boolean"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "position_shift": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Positions IDS shift before making position embed dirty patch to cover for xlm-roberta-xl",\n               "title": "Position Shift"\n            }\n         },\n         "title": "EmbeddingsConfig",\n         "type": "object"\n      },\n      "FilterTooLongConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_seq_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 192,\n               "description": "Maximum source sequence length.",\n               "title": "Src Seq Length"\n            },\n            "tgt_seq_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 192,\n               "description": "Maximum target sequence length.",\n               "title": "Tgt Seq Length"\n            }\n         },\n         "title": "FilterTooLongConfig",\n         "type": "object"\n      },\n      "HuggingfaceTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Huggingface Model"\n            },\n            "max_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Max Length"\n            }\n         },\n         "title": "HuggingfaceTokenizerConfig",\n         "type": "object"\n      },\n      "InferenceConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "quant_layers": {\n               "default": [],\n               "description": "List of layers to be compressed in 4/8bit.",\n               "items": {\n                  "type": "string"\n               },\n               "title": "Quant Layers",\n               "type": "array"\n            },\n            "quant_type": {\n               "default": "",\n               "description": "Type of compression.",\n               "enum": [\n                  "",\n                  "bnb_8bit",\n                  "bnb_FP4",\n                  "bnb_NF4",\n                  "awq_gemm",\n                  "awq_gemv"\n               ],\n               "title": "Quant Type",\n               "type": "string"\n            },\n            "w_bit": {\n               "default": 4,\n               "description": "W_bit quantization",\n               "title": "W Bit",\n               "type": "integer"\n            },\n            "group_size": {\n               "default": 128,\n               "description": "Group size quantization.",\n               "title": "Group Size",\n               "type": "integer"\n            },\n            "lora_layers": {\n               "default": [],\n               "description": "List of layers to be replaced by LoRa layers. E.g. [\'linear_values\', \'linear_query\'] (\\u00a74.2 in https://arxiv.org/abs/2106.09685)",\n               "items": {\n                  "type": "string"\n               },\n               "title": "Lora Layers",\n               "type": "array"\n            },\n            "lora_embedding": {\n               "default": false,\n               "description": "Replace embeddings with LoRa Embeddings (\\u00a75.1)",\n               "title": "Lora Embedding",\n               "type": "boolean"\n            },\n            "lora_rank": {\n               "default": 2,\n               "description": "r=2 successfully tested with NLLB-200 3.3B",\n               "title": "Lora Rank",\n               "type": "integer"\n            },\n            "lora_alpha": {\n               "default": 1,\n               "description": "\\u00a74.1 https://arxiv.org/abs/2106.09685",\n               "title": "Lora Alpha",\n               "type": "integer"\n            },\n            "lora_dropout": {\n               "default": 0.0,\n               "description": "Rule of thumb: same value as in main model.",\n               "title": "Lora Dropout",\n               "type": "number"\n            },\n            "beam_size": {\n               "default": 5,\n               "description": "Beam size.",\n               "title": "Beam Size",\n               "type": "integer"\n            },\n            "ratio": {\n               "default": -0.0,\n               "description": "Ratio based beam stop condition.",\n               "title": "Ratio",\n               "type": "number"\n            },\n            "top_k": {\n               "default": 0,\n               "description": "Set this to -1 to do random sampling from full distribution. Set this to value k>1 to do random sampling restricted to the k most likely next tokens. Set this to 1 to use argmax.",\n               "title": "Top K",\n               "type": "integer"\n            },\n            "top_p": {\n               "default": 0.0,\n               "description": "Probability for top-p/nucleus sampling. Restrict tokens to the most likely until the cumulated probability is over p. In range [0,1]. (https://arxiv.org/abs/1904.09751)",\n               "lte": 1.0,\n               "minimum": 0.0,\n               "title": "Top P",\n               "type": "number"\n            },\n            "temperature": {\n               "default": 1.0,\n               "description": "If doing random sampling, divide the logits by this before computing softmax during decoding.",\n               "title": "Temperature",\n               "type": "number"\n            },\n            "length_penalty": {\n               "default": "avg",\n               "description": "Length penalty to use.",\n               "enum": [\n                  "avg",\n                  "wu",\n                  "none"\n               ],\n               "title": "Length Penalty",\n               "type": "string"\n            },\n            "alpha": {\n               "default": 1.0,\n               "description": "Length penalty parameter (higher = longer generation)",\n               "title": "Alpha",\n               "type": "number"\n            },\n            "coverage_penalty": {\n               "default": "none",\n               "description": "Coverage penalty to use. Only available in beam search.",\n               "enum": [\n                  "none",\n                  "wu",\n                  "summary"\n               ],\n               "title": "Coverage Penalty",\n               "type": "string"\n            },\n            "beta": {\n               "default": -0.0,\n               "description": "Coverage penalty parameter.",\n               "title": "Beta",\n               "type": "number"\n            },\n            "stepwise_penalty": {\n               "default": false,\n               "description": "Apply coverage penalty at every decoding step. Helpful for summary penalty.",\n               "title": "Stepwise Penalty",\n               "type": "boolean"\n            },\n            "min_length": {\n               "default": 0,\n               "description": "Minimum prediction length.",\n               "minimum": 0,\n               "title": "Min Length",\n               "type": "integer"\n            },\n            "max_length": {\n               "default": 250,\n               "description": "Maximum prediction length.",\n               "title": "Max Length",\n               "type": "integer"\n            },\n            "max_length_ratio": {\n               "default": 2,\n               "description": "Maximum prediction length ratio. For European languages, 2 is large enough, for target Asian charageters, need to increase to 2-3, for special languages (Burmese, Amharic) to 10.",\n               "minimum": 1.0,\n               "title": "Max Length Ratio",\n               "type": "number"\n            },\n            "block_ngram_repeat": {\n               "default": 0,\n               "description": "Block repetition of ngrams during decoding.",\n               "title": "Block Ngram Repeat",\n               "type": "integer"\n            },\n            "ignore_when_blocking": {\n               "default": [],\n               "description": "Ignore these strings when blocking repeats. You want to block sentence delimiters.",\n               "items": {\n                  "type": "string"\n               },\n               "title": "Ignore When Blocking",\n               "type": "array"\n            },\n            "replace_unk": {\n               "default": false,\n               "description": "Replace the generated UNK tokens with the source token that had the highest attention weight. If phrase_table is provided, it will lok up the identified source token and give the corresponding target token. If it is not provided (or the identified source token does not exist in the table), then it will copy the source token.",\n               "title": "Replace Unk",\n               "type": "boolean"\n            },\n            "ban_unk_token": {\n               "default": false,\n               "description": "Prevent unk token generation by setting unk probability to 0.",\n               "title": "Ban Unk Token",\n               "type": "boolean"\n            },\n            "phrase_table": {\n               "default": "",\n               "description": "If phrase_table is provided (with replace_unk), it will look up the identified source token and give the corresponding target token.",\n               "title": "Phrase Table",\n               "type": "string"\n            },\n            "n_best": {\n               "default": 1,\n               "description": "Output the n_best decoded sentences.",\n               "title": "N Best",\n               "type": "integer"\n            },\n            "dump_beam": {\n               "default": "",\n               "description": "File to dump beam information to.",\n               "title": "Dump Beam",\n               "type": "string"\n            },\n            "verbose": {\n               "default": false,\n               "description": "Print scores and predictions for each input.",\n               "title": "Verbose",\n               "type": "boolean"\n            },\n            "with_score": {\n               "default": false,\n               "description": "Add a tab separated score to each output.",\n               "title": "With Score",\n               "type": "boolean"\n            },\n            "attn_debug": {\n               "default": false,\n               "description": "Print best attn for each word.",\n               "title": "Attn Debug",\n               "type": "boolean"\n            },\n            "align_debug": {\n               "default": false,\n               "description": "Print best align for each word.",\n               "title": "Align Debug",\n               "type": "boolean"\n            },\n            "gpu_ranks": {\n               "default": [],\n               "description": "List of ranks for each process.",\n               "items": {\n                  "type": "integer"\n               },\n               "title": "Gpu Ranks",\n               "type": "array"\n            },\n            "world_size": {\n               "default": 1,\n               "description": "Total number of distributed processes.",\n               "title": "World Size",\n               "type": "integer"\n            },\n            "parallel_mode": {\n               "default": "data_parallel",\n               "description": "Distributed mode.",\n               "enum": [\n                  "data_parallel",\n                  "tensor_parallel"\n               ],\n               "title": "Parallel Mode",\n               "type": "string"\n            },\n            "gpu_backend": {\n               "default": "nccl",\n               "description": "Type of torch distributed backend.",\n               "title": "Gpu Backend",\n               "type": "string"\n            },\n            "gpu_verbose_level": {\n               "default": 0,\n               "description": "Gives more info on each process per GPU.",\n               "title": "Gpu Verbose Level",\n               "type": "integer"\n            },\n            "master_ip": {\n               "default": "localhost",\n               "description": "IP of master for torch.distributed training.",\n               "title": "Master Ip",\n               "type": "string"\n            },\n            "master_port": {\n               "default": 10000,\n               "description": "Port of master for torch.distributed training.",\n               "title": "Master Port",\n               "type": "integer"\n            },\n            "timeout": {\n               "default": 60,\n               "description": "Timeout for one GPU to wait for the others.",\n               "title": "Timeout",\n               "type": "integer"\n            },\n            "model_path": {\n               "default": "model",\n               "description": "Path to directory containing all model components.",\n               "title": "Model Path",\n               "type": "string"\n            },\n            "self_attn_backend": {\n               "default": "flash",\n               "description": "Self-attention backend.",\n               "enum": [\n                  "flash",\n                  "pytorch"\n               ],\n               "title": "Self Attn Backend",\n               "type": "string"\n            },\n            "compute_dtype": {\n               "description": "Compute dtype (precision) to use for main compute. Some parameters might have other dtypes for specific cases (e.g. torch.amp -- See eole.config.training.TrainingConfig.storage_dtype) fp32 to force slow fp16 model on gtx1080, int8 to enable pytorch native 8-bit quantization (cpu only).",\n               "enum": [\n                  "fp32",\n                  "fp16",\n                  "int8",\n                  "bf16"\n               ],\n               "title": "Compute Dtype",\n               "type": "string"\n            },\n            "torch_compile": {\n               "default": false,\n               "description": "Use torch.compile with dynamic=True.",\n               "title": "Torch Compile",\n               "type": "boolean"\n            },\n            "report_align": {\n               "default": false,\n               "description": "Report alignment for each translation.",\n               "title": "Report Align",\n               "type": "boolean"\n            },\n            "gold_align": {\n               "default": false,\n               "description": "Report alignment between source and gold target. Useful to test the performance of learnt alignments.",\n               "title": "Gold Align",\n               "type": "boolean"\n            },\n            "report_time": {\n               "default": false,\n               "description": "Report some translation time metrics.",\n               "title": "Report Time",\n               "type": "boolean"\n            },\n            "profile": {\n               "default": false,\n               "description": "Report pytorch profiling stats.",\n               "title": "Profile",\n               "type": "boolean"\n            },\n            "batch_size": {\n               "default": 30,\n               "description": "Batch size.",\n               "title": "Batch Size",\n               "type": "integer"\n            },\n            "batch_type": {\n               "default": "sents",\n               "description": "Batch grouping for batch size.",\n               "enum": [\n                  "sents",\n                  "tokens"\n               ],\n               "title": "Batch Type",\n               "type": "string"\n            },\n            "avg_raw_probs": {\n               "default": false,\n               "description": "If set, during ensembling scores from different models will be combined by averaging their raw probabilities and then taking the log. Otherwise, the log probabilities will be averaged directly. Necessary for models whose output layers can assign zero probability.",\n               "title": "Avg Raw Probs",\n               "type": "boolean"\n            },\n            "data_type": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "text",\n               "title": "Data Type"\n            },\n            "chat_template": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Chat Template"\n            },\n            "optional_eos": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "description": "Optional EOS tokens that would stop generation, e.g. <|eot_id|> for Llama3",\n               "title": "Optional Eos"\n            }\n         },\n         "title": "InferenceConfig",\n         "type": "object"\n      },\n      "InlineTagsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tags_dictionary_path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path to a flat term dictionary.",\n               "title": "Tags Dictionary Path"\n            },\n            "tags_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.1,\n               "description": "Ratio of corpus to augment with tags.",\n               "title": "Tags Corpus Ratio"\n            },\n            "max_tags": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 12,\n               "description": "Maximum number of tags that can be added to a single sentence.",\n               "title": "Max Tags"\n            },\n            "paired_stag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_beg\\uff60",\n               "description": "The format of an opening paired inline tag. Must include the character #.",\n               "title": "Paired Stag"\n            },\n            "paired_etag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_end\\uff60",\n               "description": "The format of a closing paired inline tag. Must include the character #.",\n               "title": "Paired Etag"\n            },\n            "isolated_tag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_std\\uff60",\n               "description": "The format of an isolated inline tag. Must include the character #.",\n               "title": "Isolated Tag"\n            },\n            "src_delimiter": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ffuzzy\\uff60",\n               "description": "Any special token used for augmented src sentences. The default is the fuzzy token used in the FuzzyMatch transform.",\n               "title": "Src Delimiter"\n            }\n         },\n         "title": "InlineTagsConfig",\n         "type": "object"\n      },\n      "InsertMaskBeforePlaceholderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "response_patterns": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Response : \\uff5fnewline\\uff60"\n               ],\n               "description": "Response pattern to locate the end of the prompt.",\n               "title": "Response Patterns"\n            }\n         },\n         "title": "InsertMaskBeforePlaceholderConfig",\n         "type": "object"\n      },\n      "MeanEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "const": "mean",\n               "default": "mean",\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            }\n         },\n         "title": "MeanEncoderConfig",\n         "type": "object"\n      },\n      "NestedAllTransformsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "switchout": {\n               "$ref": "#/$defs/SwitchOutConfig",\n               "default": {\n                  "switchout_temperature": 1.0\n               }\n            },\n            "tokendrop": {\n               "$ref": "#/$defs/TokenDropConfig",\n               "default": {\n                  "tokendrop_temperature": 1.0\n               }\n            },\n            "tokenmask": {\n               "$ref": "#/$defs/TokenMaskConfig",\n               "default": {\n                  "tokenmask_temperature": 1.0\n               }\n            },\n            "sentencepiece": {\n               "$ref": "#/$defs/BaseTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0\n               }\n            },\n            "bpe": {\n               "$ref": "#/$defs/BaseTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0\n               }\n            },\n            "onmt_tokenize": {\n               "$ref": "#/$defs/ONMTTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0,\n                  "src_subword_type": "none",\n                  "tgt_subword_type": "none",\n                  "src_onmttok_kwargs": {\n                     "mode": "none"\n                  },\n                  "tgt_onmttok_kwargs": {\n                     "mode": "none"\n                  },\n                  "gpt2_pretok": false,\n                  "mapped_tokens": null\n               }\n            },\n            "inlinetags": {\n               "$ref": "#/$defs/InlineTagsConfig",\n               "default": {\n                  "tags_dictionary_path": null,\n                  "tags_corpus_ratio": 0.1,\n                  "max_tags": 12,\n                  "paired_stag": "\\uff5fph_#_beg\\uff60",\n                  "paired_etag": "\\uff5fph_#_end\\uff60",\n                  "isolated_tag": "\\uff5fph_#_std\\uff60",\n                  "src_delimiter": "\\uff5ffuzzy\\uff60"\n               }\n            },\n            "huggingface_tokenize": {\n               "$ref": "#/$defs/HuggingfaceTokenizerConfig",\n               "default": {\n                  "path": null,\n                  "huggingface_model": null,\n                  "max_length": null\n               }\n            },\n            "uppercase": {\n               "$ref": "#/$defs/UpperCaseConfig",\n               "default": {\n                  "upper_corpus_ratio": 0.01\n               }\n            },\n            "bart": {\n               "$ref": "#/$defs/BARTNoiseConfig",\n               "default": {\n                  "permute_sent_ratio": 0.0,\n                  "rotate_ratio": 0.0,\n                  "insert_ratio": 0.0,\n                  "random_ratio": 0.0,\n                  "mask_ratio": 0.0,\n                  "mask_length": "subword",\n                  "poisson_lambda": 3.0,\n                  "replace_length": -1\n               }\n            },\n            "docify": {\n               "$ref": "#/$defs/DocifyConfig",\n               "default": {\n                  "doc_length": 200,\n                  "max_context": 1\n               }\n            },\n            "normalize": {\n               "$ref": "#/$defs/NormalizeConfig",\n               "default": {\n                  "src_lang": "",\n                  "tgt_lang": "",\n                  "penn": true,\n                  "norm_quote_commas": true,\n                  "norm_numbers": true,\n                  "pre_replace_unicode_punct": false,\n                  "post_remove_control_chars": false\n               }\n            },\n            "terminology": {\n               "$ref": "#/$defs/TerminologyConfig",\n               "default": {\n                  "termbase_path": null,\n                  "src_spacy_language_model": null,\n                  "tgt_spacy_language_model": null,\n                  "term_corpus_ratio": 0.3,\n                  "term_example_ratio": 0.2,\n                  "src_term_stoken": "\\uff5fsrc_term_start\\uff60",\n                  "tgt_term_stoken": "\\uff5ftgt_term_start\\uff60",\n                  "tgt_term_etoken": "\\uff5ftgt_term_end\\uff60",\n                  "term_source_delimiter": "\\uff5ffuzzy\\uff60"\n               }\n            },\n            "clean": {\n               "$ref": "#/$defs/CleanConfig",\n               "default": {\n                  "src_eq_tgt": false,\n                  "same_char": false,\n                  "same_word": false,\n                  "scripts_ok": [\n                     "Latin",\n                     "Common"\n                  ],\n                  "scripts_nok": [],\n                  "src_tgt_ratio": 2.0,\n                  "avg_tok_min": 3.0,\n                  "avg_tok_max": 20.0,\n                  "langid": []\n               }\n            },\n            "filtertoolong": {\n               "$ref": "#/$defs/FilterTooLongConfig",\n               "default": {\n                  "src_seq_length": 192,\n                  "tgt_seq_length": 192\n               }\n            },\n            "prefix": {\n               "$ref": "#/$defs/PrefixConfig",\n               "default": {\n                  "src_prefix": "",\n                  "tgt_prefix": ""\n               }\n            },\n            "suffix": {\n               "$ref": "#/$defs/SuffixConfig",\n               "default": {\n                  "src_suffix": "",\n                  "tgt_suffix": ""\n               }\n            },\n            "insert_mask_before_placeholder": {\n               "$ref": "#/$defs/InsertMaskBeforePlaceholderConfig",\n               "default": {\n                  "response_patterns": [\n                     "Response : \\uff5fnewline\\uff60"\n                  ]\n               }\n            }\n         },\n         "title": "NestedAllTransformsConfig",\n         "type": "object"\n      },\n      "NormalizeConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Source language code",\n               "title": "Src Lang"\n            },\n            "tgt_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Target language code",\n               "title": "Tgt Lang"\n            },\n            "penn": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Penn substitution",\n               "title": "Penn"\n            },\n            "norm_quote_commas": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Normalize quotations and commas",\n               "title": "Norm Quote Commas"\n            },\n            "norm_numbers": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Normalize numbers",\n               "title": "Norm Numbers"\n            },\n            "pre_replace_unicode_punct": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Replace unicode punct",\n               "title": "Pre Replace Unicode Punct"\n            },\n            "post_remove_control_chars": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove control chars",\n               "title": "Post Remove Control Chars"\n            }\n         },\n         "title": "NormalizeConfig",\n         "type": "object"\n      },\n      "ONMTTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for src (or shared).",\n               "title": "Src Subword Model"\n            },\n            "tgt_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for tgt.",\n               "title": "Tgt Subword Model"\n            },\n            "src_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (source side)",\n               "title": "Src Subword Nbest"\n            },\n            "tgt_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (target side)",\n               "title": "Tgt Subword Nbest"\n            },\n            "src_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (source side)",\n               "title": "Src Subword Alpha"\n            },\n            "tgt_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (target side)",\n               "title": "Tgt Subword Alpha"\n            },\n            "src_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for src subword. Format: <word>\\\\t<count> per line.",\n               "title": "Src Subword Vocab"\n            },\n            "tgt_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for tgt subword. Format: <word>\\\\t<count> per line.",\n               "title": "Tgt Subword Vocab"\n            },\n            "src_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce src subword in src_subword_vocab with frequency >= src_vocab_threshold.",\n               "title": "Src Vocab Threshold"\n            },\n            "tgt_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce tgt subword in tgt_subword_vocab with frequency >= tgt_vocab_threshold.",\n               "title": "Tgt Vocab Threshold"\n            },\n            "src_subword_type": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "none",\n                        "sentencepiece",\n                        "bpe"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "none",\n               "description": "Type of subword model for src (or shared) in pyonmttok.",\n               "title": "Src Subword Type"\n            },\n            "tgt_subword_type": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "none",\n                        "sentencepiece",\n                        "bpe"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "none",\n               "description": "Type of subword model for tgt in pyonmttok.",\n               "title": "Tgt Subword Type"\n            },\n            "src_onmttok_kwargs": {\n               "anyOf": [\n                  {\n                     "type": "object"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": {\n                  "mode": "none"\n               },\n               "description": "Other pyonmttok options for src in dict string, except subword related options listed earlier.",\n               "title": "Src Onmttok Kwargs"\n            },\n            "tgt_onmttok_kwargs": {\n               "anyOf": [\n                  {\n                     "type": "object"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": {\n                  "mode": "none"\n               },\n               "description": "Other pyonmttok options for tgt in dict string, except subword related options listed earlier.",\n               "title": "Tgt Onmttok Kwargs"\n            },\n            "gpt2_pretok": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Preprocess sentence with byte-level mapping.",\n               "title": "Gpt2 Pretok"\n            },\n            "mapped_tokens": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "maxItems": 2,\n                        "minItems": 2,\n                        "prefixItems": [\n                           {\n                              "type": "string"\n                           },\n                           {\n                              "type": "string"\n                           }\n                        ],\n                        "type": "array"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Mapped tokens for placeholders preservation",\n               "title": "Mapped Tokens"\n            }\n         },\n         "title": "ONMTTokenizerConfig",\n         "type": "object"\n      },\n      "PositionEncodingType": {\n         "enum": [\n            "SinusoidalInterleaved",\n            "SinusoidalConcat",\n            "Learned",\n            "Relative",\n            "Rotary",\n            "Alibi"\n         ],\n         "title": "PositionEncodingType",\n         "type": "string"\n      },\n      "PrefixConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to prepend to all source examples.",\n               "title": "Src Prefix"\n            },\n            "tgt_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to prepend to all target examples.",\n               "title": "Tgt Prefix"\n            }\n         },\n         "title": "PrefixConfig",\n         "type": "object"\n      },\n      "RnnDecoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "decoder_type": {\n               "const": "rnn",\n               "default": "rnn",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "bridge": {\n               "default": false,\n               "description": "Have an additional layer between the last encoder state and the first decoder state (RNN specific).",\n               "title": "Bridge",\n               "type": "boolean"\n            },\n            "rnn_type": {\n               "default": "LSTM",\n               "description": "The gate type to use in the RNNs.",\n               "enum": [\n                  "LSTM",\n                  "GRU"\n               ],\n               "title": "Rnn Type",\n               "type": "string"\n            },\n            "context_gate": {\n               "default": null,\n               "description": "Type of context gate to use.",\n               "enum": [\n                  "source",\n                  "target",\n                  "both",\n                  null\n               ],\n               "title": "Context Gate"\n            },\n            "bidirectional_encoder": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "title": "Bidirectional Encoder"\n            }\n         },\n         "title": "RnnDecoderConfig",\n         "type": "object"\n      },\n      "RnnEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "default": "rnn",\n               "enum": [\n                  "rnn",\n                  "brnn"\n               ],\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "bridge": {\n               "default": false,\n               "description": "Have an additional layer between the last encoder state and the first decoder state (RNN specific).",\n               "title": "Bridge",\n               "type": "boolean"\n            },\n            "rnn_type": {\n               "default": "LSTM",\n               "description": "The gate type to use in the RNNs.",\n               "enum": [\n                  "LSTM",\n                  "GRU"\n               ],\n               "title": "Rnn Type",\n               "type": "string"\n            }\n         },\n         "title": "RnnEncoderConfig",\n         "type": "object"\n      },\n      "RnnModelConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": -1,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "rnn",\n               "default": "rnn",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "bridge": {\n               "default": false,\n               "description": "Have an additional layer between the last encoder state and the first decoder state (RNN specific).",\n               "title": "Bridge",\n               "type": "boolean"\n            },\n            "rnn_type": {\n               "default": "LSTM",\n               "description": "The gate type to use in the RNNs.",\n               "enum": [\n                  "LSTM",\n                  "GRU"\n               ],\n               "title": "Rnn Type",\n               "type": "string"\n            }\n         },\n         "title": "RnnModelConfig",\n         "type": "object"\n      },\n      "RotaryPositionConfig": {\n         "additionalProperties": false,\n         "description": "Configuration for rotary position embeddings used in transformer models.",\n         "properties": {\n            "rotary_interleave": {\n               "default": true,\n               "description": "Interleave the head dimensions when rotary embeddings are applied. Otherwise the head dimensions are sliced in half. (True= Llama from Meta (original), False= used by all HuggingFace models)",\n               "title": "Rotary Interleave",\n               "type": "boolean"\n            },\n            "rotary_theta": {\n               "default": 10000,\n               "description": "Rotary theta base length, 1e4 for Llama2.Mistral, 1e6 for Mixtral",\n               "title": "Rotary Theta",\n               "type": "integer"\n            },\n            "rotary_dim": {\n               "default": 0,\n               "description": "Rotary dim when model requires it to be different to head dim.",\n               "title": "Rotary Dim",\n               "type": "integer"\n            },\n            "scaling_type": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Specifies the type of RoPE scaling to be applied, if any.",\n               "title": "Scaling Type"\n            },\n            "scaling_factor": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 8.0,\n               "description": "Factor by which to scale RoPE embeddings.",\n               "title": "Scaling Factor"\n            },\n            "low_freq_factor": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Scaling factor applied to the lower frequency components of RoPE.",\n               "title": "Low Freq Factor"\n            },\n            "high_freq_factor": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 4.0,\n               "description": "Scaling factor applied to the higher frequency components of RoPE.",\n               "title": "High Freq Factor"\n            },\n            "original_max_position_embeddings": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 8192,\n               "description": "Original maximum position embeddings for RoPE scaling.",\n               "title": "Original Max Position Embeddings"\n            }\n         },\n         "title": "RotaryPositionConfig",\n         "type": "object"\n      },\n      "SuffixConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to append to all source examples.",\n               "title": "Src Suffix"\n            },\n            "tgt_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to append to all target examples.",\n               "title": "Tgt Suffix"\n            }\n         },\n         "title": "SuffixConfig",\n         "type": "object"\n      },\n      "SwitchOutConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "switchout_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for SwitchOut. :math:`\\\\tau^{-1}` in :cite:`DBLP:journals/corr/abs-1808-07512`. Smaller value makes data more diverse.",\n               "title": "Switchout Temperature"\n            }\n         },\n         "title": "SwitchOutConfig",\n         "type": "object"\n      },\n      "TerminologyConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "termbase_path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path to a dictionary file with terms.",\n               "title": "Termbase Path"\n            },\n            "src_spacy_language_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Name of the spaCy language model for the source corpus.",\n               "title": "Src Spacy Language Model"\n            },\n            "tgt_spacy_language_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Name of the spaCy language model for the target corpus.",\n               "title": "Tgt Spacy Language Model"\n            },\n            "term_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.3,\n               "description": "Ratio of corpus to augment with terms.",\n               "title": "Term Corpus Ratio"\n            },\n            "term_example_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.2,\n               "description": "Maximum terms allowed in an example.",\n               "title": "Term Example Ratio"\n            },\n            "src_term_stoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fsrc_term_start\\uff60",\n               "description": "The source term start token.",\n               "title": "Src Term Stoken"\n            },\n            "tgt_term_stoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ftgt_term_start\\uff60",\n               "description": "The target term start token.",\n               "title": "Tgt Term Stoken"\n            },\n            "tgt_term_etoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ftgt_term_end\\uff60",\n               "description": "The target term end token.",\n               "title": "Tgt Term Etoken"\n            },\n            "term_source_delimiter": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ffuzzy\\uff60",\n               "description": "Any special token used for augmented source sentences. The default is the fuzzy token used in the FuzzyMatch transform.",\n               "title": "Term Source Delimiter"\n            }\n         },\n         "title": "TerminologyConfig",\n         "type": "object"\n      },\n      "TokenDropConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tokendrop_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for token deletion.",\n               "title": "Tokendrop Temperature"\n            }\n         },\n         "title": "TokenDropConfig",\n         "type": "object"\n      },\n      "TokenMaskConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tokenmask_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for token masking.",\n               "title": "Tokenmask Temperature"\n            }\n         },\n         "title": "TokenMaskConfig",\n         "type": "object"\n      },\n      "TrainingConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "quant_layers": {\n               "default": [],\n               "description": "List of layers to be compressed in 4/8bit.",\n               "items": {\n                  "type": "string"\n               },\n               "title": "Quant Layers",\n               "type": "array"\n            },\n            "quant_type": {\n               "default": "",\n               "description": "Type of compression.",\n               "enum": [\n                  "",\n                  "bnb_8bit",\n                  "bnb_FP4",\n                  "bnb_NF4",\n                  "awq_gemm",\n                  "awq_gemv"\n               ],\n               "title": "Quant Type",\n               "type": "string"\n            },\n            "w_bit": {\n               "default": 4,\n               "description": "W_bit quantization",\n               "title": "W Bit",\n               "type": "integer"\n            },\n            "group_size": {\n               "default": 128,\n               "description": "Group size quantization.",\n               "title": "Group Size",\n               "type": "integer"\n            },\n            "lora_layers": {\n               "default": [],\n               "description": "List of layers to be replaced by LoRa layers. E.g. [\'linear_values\', \'linear_query\'] (\\u00a74.2 in https://arxiv.org/abs/2106.09685)",\n               "items": {\n                  "type": "string"\n               },\n               "title": "Lora Layers",\n               "type": "array"\n            },\n            "lora_embedding": {\n               "default": false,\n               "description": "Replace embeddings with LoRa Embeddings (\\u00a75.1)",\n               "title": "Lora Embedding",\n               "type": "boolean"\n            },\n            "lora_rank": {\n               "default": 2,\n               "description": "r=2 successfully tested with NLLB-200 3.3B",\n               "title": "Lora Rank",\n               "type": "integer"\n            },\n            "lora_alpha": {\n               "default": 1,\n               "description": "\\u00a74.1 https://arxiv.org/abs/2106.09685",\n               "title": "Lora Alpha",\n               "type": "integer"\n            },\n            "lora_dropout": {\n               "default": 0.0,\n               "description": "Rule of thumb: same value as in main model.",\n               "title": "Lora Dropout",\n               "type": "number"\n            },\n            "optim": {\n               "default": "sgd",\n               "description": "Optimization method.",\n               "enum": [\n                  "sgd",\n                  "adagrad",\n                  "adadelta",\n                  "adam",\n                  "adamw",\n                  "sparseadam",\n                  "adafactor",\n                  "fusedadam",\n                  "adamw8bit",\n                  "pagedadamw8bit",\n                  "pagedadamw32bit"\n               ],\n               "title": "Optim",\n               "type": "string"\n            },\n            "adagrad_accumulator_init": {\n               "default": 0,\n               "description": "Initialize the accumulator values in adagrad. Mirrors initial_accumulator_value flag from tensorflow adagrad implementation (default 0.1 there).",\n               "title": "Adagrad Accumulator Init",\n               "type": "number"\n            },\n            "adam_beta1": {\n               "default": 0.9,\n               "description": "Beta1 parameter used by Adam. Almost without exception a value of 0.9 is used in the literature, seemingly giving good results, so we would discourage changing this value from the default without due consideration.",\n               "title": "Adam Beta1",\n               "type": "number"\n            },\n            "adam_beta2": {\n               "default": 0.999,\n               "description": "Beta2 parameter used by Adam. Typically a value of 0.999 is recommended, as this is the value suggested by the original paper describing Adam, and is also the value adopted in other frameworks such as Tensorflow (https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer) and Keras (https://keras.io/optimizers/). Whereas recently the paper Attention is All You Need suggested a value of 0.98 for beta2, this parameter may not work well for normal models / default baselines.",\n               "title": "Adam Beta2",\n               "type": "number"\n            },\n            "weight_decay": {\n               "default": 0.0,\n               "description": "Weight decay to forward to torch Optimizer.",\n               "title": "Weight Decay",\n               "type": "number"\n            },\n            "learning_rate": {\n               "default": 1.0,\n               "description": "Starting learning rate. Recommended settings: sgd=1, adagrad=0.1, adadelta=1, adam=0.001.",\n               "title": "Learning Rate",\n               "type": "number"\n            },\n            "learning_rate_decay": {\n               "default": 0.5,\n               "description": "Decay learning rate by this much if steps have gone past start_decay_steps.",\n               "title": "Learning Rate Decay",\n               "type": "number"\n            },\n            "start_decay_steps": {\n               "default": 50000,\n               "description": "Start decaying every decay_steps after this many steps.",\n               "title": "Start Decay Steps",\n               "type": "integer"\n            },\n            "decay_steps": {\n               "default": 10000,\n               "description": "Frequency for learning rate decay, in steps.",\n               "title": "Decay Steps",\n               "type": "integer"\n            },\n            "decay_method": {\n               "default": "none",\n               "description": "Custom decay method to use.",\n               "enum": [\n                  "noam",\n                  "noamwd",\n                  "cosine",\n                  "rsqrt",\n                  "none"\n               ],\n               "title": "Decay Method",\n               "type": "string"\n            },\n            "warmup_steps": {\n               "default": 4000,\n               "description": "Number of warmup steps for custom decay.",\n               "title": "Warmup Steps",\n               "type": "integer"\n            },\n            "reset_optim": {\n               "default": "none",\n               "description": "Optimization resetter when using train_from.",\n               "enum": [\n                  "none",\n                  "all",\n                  "states",\n                  "keep_states"\n               ],\n               "title": "Reset Optim",\n               "type": "string"\n            },\n            "gpu_ranks": {\n               "default": [],\n               "description": "List of ranks for each process.",\n               "items": {\n                  "type": "integer"\n               },\n               "title": "Gpu Ranks",\n               "type": "array"\n            },\n            "world_size": {\n               "default": 1,\n               "description": "Total number of distributed processes.",\n               "title": "World Size",\n               "type": "integer"\n            },\n            "parallel_mode": {\n               "default": "data_parallel",\n               "description": "Distributed mode.",\n               "enum": [\n                  "data_parallel",\n                  "tensor_parallel"\n               ],\n               "title": "Parallel Mode",\n               "type": "string"\n            },\n            "gpu_backend": {\n               "default": "nccl",\n               "description": "Type of torch distributed backend.",\n               "title": "Gpu Backend",\n               "type": "string"\n            },\n            "gpu_verbose_level": {\n               "default": 0,\n               "description": "Gives more info on each process per GPU.",\n               "title": "Gpu Verbose Level",\n               "type": "integer"\n            },\n            "master_ip": {\n               "default": "localhost",\n               "description": "IP of master for torch.distributed training.",\n               "title": "Master Ip",\n               "type": "string"\n            },\n            "master_port": {\n               "default": 10000,\n               "description": "Port of master for torch.distributed training.",\n               "title": "Master Port",\n               "type": "integer"\n            },\n            "timeout": {\n               "default": 60,\n               "description": "Timeout for one GPU to wait for the others.",\n               "title": "Timeout",\n               "type": "integer"\n            },\n            "model_path": {\n               "default": "model",\n               "description": "Path to directory containing all model components.",\n               "title": "Model Path",\n               "type": "string"\n            },\n            "self_attn_backend": {\n               "default": "flash",\n               "description": "Self-attention backend.",\n               "enum": [\n                  "flash",\n                  "pytorch"\n               ],\n               "title": "Self Attn Backend",\n               "type": "string"\n            },\n            "compute_dtype": {\n               "description": "Compute dtype (precision) to use for main compute. Some parameters might have other dtypes for specific cases (e.g. torch.amp -- See eole.config.training.TrainingConfig.storage_dtype) fp32 to force slow fp16 model on gtx1080, int8 to enable pytorch native 8-bit quantization (cpu only).",\n               "enum": [\n                  "fp32",\n                  "fp16",\n                  "int8",\n                  "bf16"\n               ],\n               "title": "Compute Dtype",\n               "type": "string"\n            },\n            "torch_compile": {\n               "default": false,\n               "description": "Use torch.compile with dynamic=True.",\n               "title": "Torch Compile",\n               "type": "boolean"\n            },\n            "param_init": {\n               "default": 0.1,\n               "description": "Support value for uniform distribution parameters initialization. Set to 0 not to use initialization.",\n               "title": "Param Init",\n               "type": "number"\n            },\n            "param_init_method": {\n               "default": "uniform",\n               "description": "Parameter initialization method.",\n               "enum": [\n                  "xavier_uniform",\n                  "uniform",\n                  "normal"\n               ],\n               "title": "Param Init Method",\n               "type": "string"\n            },\n            "freeze_encoder": {\n               "default": false,\n               "description": "Freeze parameters in encoder.",\n               "title": "Freeze Encoder",\n               "type": "boolean"\n            },\n            "freeze_decoder": {\n               "default": false,\n               "description": "Freeze parameters in decoder.",\n               "title": "Freeze Decoder",\n               "type": "boolean"\n            },\n            "pre_word_vecs_enc": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "If a valid path is specified, will load pretrained word embeddings on the encoder side.",\n               "title": "Pre Word Vecs Enc"\n            },\n            "pre_word_vecs_dec": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "If a valid path is specified, will load pretrained word embeddings on the decoder side.",\n               "title": "Pre Word Vecs Dec"\n            },\n            "data_type": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "text",\n               "title": "Data Type"\n            },\n            "bucket_size": {\n               "default": 262144,\n               "description": "A bucket is a buffer of bucket_size examples to pick from the various corpora. The dynamic iterator batches batch_size items from the bucket and shuffle them.",\n               "title": "Bucket Size",\n               "type": "integer"\n            },\n            "bucket_size_init": {\n               "default": -1,\n               "description": "Bucket size is initialized with this amount of examples (see bucket_size_increment).",\n               "title": "Bucket Size Init",\n               "type": "integer"\n            },\n            "bucket_size_increment": {\n               "default": 0,\n               "description": "Bucket size incremented with this amount of examples at each new bucket (up to bucket_size).",\n               "title": "Bucket Size Increment",\n               "type": "integer"\n            },\n            "prefetch_factor": {\n               "default": 200,\n               "description": "Number of mini-batches loaded in advance to avoid the GPU waiting during processing of next bucket.",\n               "title": "Prefetch Factor",\n               "type": "integer"\n            },\n            "save_format": {\n               "default": "pytorch",\n               "description": "Format to save the model weights.",\n               "enum": [\n                  "pytorch",\n                  "safetensors"\n               ],\n               "title": "Save Format",\n               "type": "string"\n            },\n            "save_checkpoint_steps": {\n               "default": 5000,\n               "description": "Frequency of checkpoint saving (in steps).",\n               "title": "Save Checkpoint Steps",\n               "type": "integer"\n            },\n            "keep_checkpoint": {\n               "default": -1,\n               "description": "Number of checkpoints to retain. (-1 retains all)",\n               "title": "Keep Checkpoint",\n               "type": "integer"\n            },\n            "train_from": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Pretrained model/checkpoint weights to continue training from.",\n               "title": "Train From"\n            },\n            "num_workers": {\n               "default": 2,\n               "description": "Number of workers for pytorch.DataLoader objects.",\n               "title": "Num Workers",\n               "type": "integer"\n            },\n            "batch_size": {\n               "default": 64,\n               "description": "Maximum batch size for training.",\n               "title": "Batch Size",\n               "type": "integer"\n            },\n            "batch_size_multiple": {\n               "default": 1,\n               "description": "Batch size multiple for token batches.",\n               "title": "Batch Size Multiple",\n               "type": "integer"\n            },\n            "batch_type": {\n               "default": "sents",\n               "description": "Batch grouping for batch_size.",\n               "enum": [\n                  "sents",\n                  "tokens"\n               ],\n               "title": "Batch Type",\n               "type": "string"\n            },\n            "normalization": {\n               "default": "sents",\n               "description": "Normalization method of the gradient.",\n               "enum": [\n                  "sents",\n                  "tokens"\n               ],\n               "title": "Normalization",\n               "type": "string"\n            },\n            "accum_count": {\n               "default": [\n                  1\n               ],\n               "description": "Accumulate gradient this many times. Approximately equivalent to updating batch_size * accum_count batches at once. Recommended for transformer.",\n               "items": {\n                  "type": "integer"\n               },\n               "title": "Accum Count",\n               "type": "array"\n            },\n            "accum_steps": {\n               "default": [\n                  0\n               ],\n               "description": "Steps at which accum_count values change.",\n               "items": {\n                  "type": "integer"\n               },\n               "title": "Accum Steps",\n               "type": "array"\n            },\n            "valid_steps": {\n               "default": 10000,\n               "description": "Frequency of validation, in steps.",\n               "title": "Valid Steps",\n               "type": "integer"\n            },\n            "valid_batch_size": {\n               "default": 32,\n               "description": "Maximum batch size for validation.",\n               "title": "Valid Batch Size",\n               "type": "integer"\n            },\n            "train_steps": {\n               "default": 100000,\n               "description": "Number of training steps.",\n               "title": "Train Steps",\n               "type": "integer"\n            },\n            "single_pass": {\n               "default": false,\n               "description": "Make a single pass over the training dataset.",\n               "title": "Single Pass",\n               "type": "boolean"\n            },\n            "early_stopping": {\n               "default": 0,\n               "description": "Number of validation steps without improving that will trigger early stop of training.",\n               "title": "Early Stopping",\n               "type": "integer"\n            },\n            "early_stopping_criteria": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Criteria to use for early stopping.",\n               "title": "Early Stopping Criteria"\n            },\n            "max_grad_norm": {\n               "default": 5,\n               "description": "If the norm of the gradient vector exceeds this value, renormalize it to have the norm equal to max_grad_norm.",\n               "title": "Max Grad Norm",\n               "type": "number"\n            },\n            "dropout": {\n               "default": [\n                  0.3\n               ],\n               "description": "Dropout probability.",\n               "items": {\n                  "type": "number"\n               },\n               "title": "Dropout",\n               "type": "array"\n            },\n            "attention_dropout": {\n               "default": [\n                  0.1\n               ],\n               "description": "Attention dropout probability.",\n               "items": {\n                  "type": "number"\n               },\n               "title": "Attention Dropout",\n               "type": "array"\n            },\n            "dropout_steps": {\n               "default": [\n                  0\n               ],\n               "description": "Steps at which dropout changes.",\n               "items": {\n                  "type": "integer"\n               },\n               "title": "Dropout Steps",\n               "type": "array"\n            },\n            "truncated_decoder": {\n               "default": 0,\n               "description": "Truncated bptt.",\n               "title": "Truncated Decoder",\n               "type": "integer"\n            },\n            "label_smoothing": {\n               "default": 0.0,\n               "description": "Label smoothing value epsilon. Probability of all non-true labels will be smoothed by epsilon/(vocab_size-1). Set to 0 to turn off label smoothing. (https://arxiv.org/abs/1512.00567)",\n               "title": "Label Smoothing",\n               "type": "number"\n            },\n            "average_decay": {\n               "default": 0.0,\n               "description": "Exponential moving average decay (https://en.wikipedia.org/wiki/Moving_average). Set to other than 0 (e.g. 1e-4) to activate. Similar to Marian NMT implementation (http://www.aclweb.org/anthology/P18-4020).",\n               "title": "Average Decay",\n               "type": "number"\n            },\n            "average_every": {\n               "default": 1,\n               "description": "Step for moving average. Default is every update if average_decay is set.",\n               "title": "Average Every",\n               "type": "integer"\n            },\n            "loss_scale": {\n               "default": 0.0,\n               "description": "For FP16 training, the static loss scale to use. If not set, the loss scale is dynamically computed.",\n               "title": "Loss Scale",\n               "type": "number"\n            },\n            "apex_opt_level": {\n               "default": "",\n               "description": "For FP16 training, the opt_level to use. See https://nvidia.github.io/apex/amp.html#opt-levels.",\n               "enum": [\n                  "",\n                  "O0",\n                  "O1",\n                  "O2",\n                  "O3"\n               ],\n               "title": "Apex Opt Level",\n               "type": "string"\n            },\n            "zero_out_prompt_loss": {\n               "default": false,\n               "description": "Set the prompt loss to zero. Mostly for LLM finetuning. Will be enabled only if the `insert_mask_before_placeholder` transform is applied.",\n               "title": "Zero Out Prompt Loss",\n               "type": "boolean"\n            },\n            "use_ckpting": {\n               "default": [],\n               "description": "Use gradient checkpointing for those modules.",\n               "items": {\n                  "type": "string"\n               },\n               "title": "Use Ckpting",\n               "type": "array"\n            },\n            "update_vocab": {\n               "default": false,\n               "description": "Update source and target existing vocabularies.",\n               "title": "Update Vocab",\n               "type": "boolean"\n            },\n            "lm_prior_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "LM model to use to train the TM.",\n               "title": "Lm Prior Model"\n            },\n            "lm_prior_lambda": {\n               "default": 0.0,\n               "description": "LM Prior Lambda",\n               "title": "Lm Prior Lambda",\n               "type": "number"\n            },\n            "lm_prior_tau": {\n               "default": 1.0,\n               "description": "LM Prior Tau",\n               "title": "Lm Prior Tau",\n               "type": "number"\n            },\n            "estim_loss_lambda": {\n               "default": [\n                  1.0\n               ],\n               "description": "Weight applied to estimator loss",\n               "items": {\n                  "type": "number"\n               },\n               "title": "Estim Loss Lambda",\n               "type": "array"\n            },\n            "estim_loss_lambda_steps": {\n               "default": [\n                  0\n               ],\n               "description": "Steps at which estimator loss lambda changes",\n               "items": {\n                  "type": "integer"\n               },\n               "title": "Estim Loss Lambda Steps",\n               "type": "array"\n            },\n            "score_threshold": {\n               "default": 0.68,\n               "description": "Threshold to filterout data",\n               "title": "Score Threshold",\n               "type": "number"\n            },\n            "dummy_load": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Ignore some warnings if we are only loading the configuration prior to other operations, e.g. in `train_from` context.",\n               "title": "Dummy Load"\n            }\n         },\n         "title": "TrainingConfig",\n         "type": "object"\n      },\n      "TransformerDecoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "decoder_type": {\n               "const": "transformer",\n               "default": "transformer",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            },\n            "aan_useffn": {\n               "default": false,\n               "description": "Turn on the FFN layer in the AAN decoder.",\n               "title": "Aan Useffn",\n               "type": "boolean"\n            },\n            "alignment_layer": {\n               "default": -2,\n               "description": "Layer number which has to be supervised.",\n               "title": "Alignment Layer",\n               "type": "integer"\n            },\n            "alignment_heads": {\n               "default": 0,\n               "description": "Number of cross attention heads per layer to supervise with.",\n               "title": "Alignment Heads",\n               "type": "integer"\n            },\n            "full_context_alignment": {\n               "default": false,\n               "description": "Whether alignment is conditioned on full target context.",\n               "title": "Full Context Alignment",\n               "type": "boolean"\n            },\n            "lambda_align": {\n               "default": 0.0,\n               "description": "Lambda value for alignement loss of Garg et al, 2019 (https://arxiv.org/abs/1909.02074)",\n               "title": "Lambda Align",\n               "type": "number"\n            }\n         },\n         "title": "TransformerDecoderConfig",\n         "type": "object"\n      },\n      "TransformerEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "const": "transformer",\n               "default": "transformer",\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerEncoderConfig",\n         "type": "object"\n      },\n      "TransformerEncoderModelConfig": {\n         "additionalProperties": false,\n         "description": "Facilitate setting some transformer specific params at model level.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder",\n               "type": "null"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "transformer_encoder",\n               "default": "transformer_encoder",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerEncoderModelConfig",\n         "type": "object"\n      },\n      "TransformerLMDecoderConfig": {\n         "additionalProperties": false,\n         "description": "Right now just wraps TransformerDecoderConfig for simplicity.\\nMight merge in a single class later once TransformerLM path is clarified.",\n         "properties": {\n            "decoder_type": {\n               "const": "transformer_lm",\n               "default": "transformer_lm",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            },\n            "aan_useffn": {\n               "default": false,\n               "description": "Turn on the FFN layer in the AAN decoder.",\n               "title": "Aan Useffn",\n               "type": "boolean"\n            },\n            "alignment_layer": {\n               "default": -2,\n               "description": "Layer number which has to be supervised.",\n               "title": "Alignment Layer",\n               "type": "integer"\n            },\n            "alignment_heads": {\n               "default": 0,\n               "description": "Number of cross attention heads per layer to supervise with.",\n               "title": "Alignment Heads",\n               "type": "integer"\n            },\n            "full_context_alignment": {\n               "default": false,\n               "description": "Whether alignment is conditioned on full target context.",\n               "title": "Full Context Alignment",\n               "type": "boolean"\n            },\n            "lambda_align": {\n               "default": 0.0,\n               "description": "Lambda value for alignement loss of Garg et al, 2019 (https://arxiv.org/abs/1909.02074)",\n               "title": "Lambda Align",\n               "type": "number"\n            }\n         },\n         "title": "TransformerLMDecoderConfig",\n         "type": "object"\n      },\n      "TransformerLMModelConfig": {\n         "additionalProperties": false,\n         "description": "Facilitate setting some transformer specific params at model level.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder",\n               "type": "null"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "transformer_lm",\n               "default": "transformer_lm",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerLMModelConfig",\n         "type": "object"\n      },\n      "TransformerModelConfig": {\n         "additionalProperties": false,\n         "description": "Facilitate setting some transformer specific params at model level.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "transformer",\n               "default": "transformer",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerModelConfig",\n         "type": "object"\n      },\n      "UpperCaseConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "upper_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.01,\n               "description": "Corpus ratio to apply uppercasing.",\n               "title": "Upper Corpus Ratio"\n            }\n         },\n         "title": "UpperCaseConfig",\n         "type": "object"\n      }\n   },\n   "additionalProperties": false,\n   "required": [\n      "src_vocab",\n      "data"\n   ]\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = forbid"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.inference",children:(0,i.jsx)(e.code,{children:"inference (eole.config.inference.InferenceConfig | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.model",children:(0,i.jsx)(e.code,{children:"model (eole.config.models.TransformerModelConfig | eole.config.models.TransformerLMModelConfig | eole.config.models.TransformerEncoderModelConfig | eole.config.models.RnnModelConfig | eole.config.models.CnnModelConfig | eole.config.models.CustomModelConfig | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.n_sample",children:(0,i.jsx)(e.code,{children:"n_sample (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.training",children:(0,i.jsx)(e.code,{children:"training (eole.config.training.TrainingConfig | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.verbose",children:(0,i.jsx)(e.code,{children:"verbose (bool)"})})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validators:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"_validate_train_config"})," \xbb ",(0,i.jsx)(e.code,{children:"all fields"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.default_architecture",children:(0,i.jsx)(e.code,{children:"default_architecture"})})," \xbb ",(0,i.jsx)(e.code,{children:"all fields"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.str_to_dict",children:(0,i.jsx)(e.code,{children:"str_to_dict"})})," \xbb ",(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.model",children:(0,i.jsx)(e.code,{children:"model"})})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.str_to_dict",children:(0,i.jsx)(e.code,{children:"str_to_dict"})})," \xbb ",(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.training",children:(0,i.jsx)(e.code,{children:"training"})})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-inference--inferenceconfig--none--none",children:[(0,i.jsx)(e.em,{children:"field"})," inference ",(0,i.jsxs)(e.em,{children:[": ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/inference#eole.config.inference.InferenceConfig",children:"InferenceConfig"})," | None"]})," ",(0,i.jsx)(e.em,{children:"= None"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_train_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.default_architecture",children:(0,i.jsx)(e.code,{children:"default_architecture"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-model--transformermodelconfig--transformerlmmodelconfig--transformerencodermodelconfig--rnnmodelconfig--cnnmodelconfig--custommodelconfig--none--none",children:[(0,i.jsx)(e.em,{children:"field"})," model ",(0,i.jsxs)(e.em,{children:[": ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.TransformerModelConfig",children:"TransformerModelConfig"})," | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.TransformerLMModelConfig",children:"TransformerLMModelConfig"})," | TransformerEncoderModelConfig | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.RnnModelConfig",children:"RnnModelConfig"})," | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.CnnModelConfig",children:"CnnModelConfig"})," | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.CustomModelConfig",children:"CustomModelConfig"})," | None"]})," ",(0,i.jsx)(e.em,{children:"= None"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_train_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.default_architecture",children:(0,i.jsx)(e.code,{children:"default_architecture"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.str_to_dict",children:(0,i.jsx)(e.code,{children:"str_to_dict"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-n_sample--int--0",children:[(0,i.jsx)(e.em,{children:"field"})," n_sample ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 0"})]}),"\n",(0,i.jsx)(e.p,{children:"Number of transformed samples per corpus to use to build the vocabulary. Set to -1 to use the full corpora."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_train_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.default_architecture",children:(0,i.jsx)(e.code,{children:"default_architecture"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-training--trainingconfig--none-optional",children:[(0,i.jsx)(e.em,{children:"field"})," training ",(0,i.jsxs)(e.em,{children:[": ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/training#eole.config.training.TrainingConfig",children:"TrainingConfig"})," | None"]})," ",(0,i.jsx)(e.em,{children:"[Optional]"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_train_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.default_architecture",children:(0,i.jsx)(e.code,{children:"default_architecture"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.str_to_dict",children:(0,i.jsx)(e.code,{children:"str_to_dict"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-verbose--bool--false",children:[(0,i.jsx)(e.em,{children:"field"})," verbose ",(0,i.jsx)(e.em,{children:": bool"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsx)(e.p,{children:"Print data loading and statistics for all process (default only logs the first process shard)."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_train_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.default_architecture",children:(0,i.jsx)(e.code,{children:"default_architecture"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"validator-default_architecture----all-fieldssource",children:[(0,i.jsx)(e.em,{children:"validator"})," default_architecture  ",(0,i.jsx)(e.em,{children:"\xbb"}),"  ",(0,i.jsx)(e.em,{children:"all fields"}),(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/run.py#L61-L70",children:"[source]"})]}),"\n",(0,i.jsxs)(e.h4,{id:"classmethod-get_defaultsarchitecturesource",children:[(0,i.jsx)(e.em,{children:"classmethod"})," get_defaults(architecture)",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/run.py#L42-L49",children:"[source]"})]}),"\n",(0,i.jsxs)(e.h4,{id:"get_model_pathsource",children:["get_model_path()",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/run.py#L39-L40",children:"[source]"})]}),"\n",(0,i.jsx)(e.h4,{id:"model_post_initcontext-any-",children:"model_post_init(context: Any, /)"}),"\n",(0,i.jsx)(e.p,{children:"We need to both initialize private attributes and call the user-defined model_post_init\nmethod."}),"\n",(0,i.jsxs)(e.h4,{id:"validator-str_to_dict----model--trainingsource",children:[(0,i.jsx)(e.em,{children:"validator"})," str_to_dict  ",(0,i.jsx)(e.em,{children:"\xbb"}),"  ",(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.model",children:(0,i.jsx)(e.em,{children:"model"})})," ",(0,i.jsx)(e.em,{children:","})," ",(0,i.jsx)(e.a,{href:"#eole.config.run.TrainConfig.training",children:(0,i.jsx)(e.em,{children:"training"})}),(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/run.py#L51-L59",children:"[source]"})]}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigrunpredictconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.run.PredictConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/run.py#L88-L203",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/inference#eole.config.inference.InferenceConfig",children:(0,i.jsx)(e.code,{children:"InferenceConfig"})}),", ",(0,i.jsx)(e.a,{href:"#eole.config.common.LoggingConfig",children:(0,i.jsx)(e.code,{children:"LoggingConfig"})}),", ",(0,i.jsx)(e.a,{href:"#eole.config.common.MiscConfig",children:(0,i.jsx)(e.code,{children:"MiscConfig"})})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "PredictConfig",\n   "type": "object",\n   "properties": {\n      "seed": {\n         "default": -1,\n         "description": "Set random seed used for better reproducibility between experiments.",\n         "title": "Seed",\n         "type": "integer"\n      },\n      "log_file": {\n         "default": "",\n         "description": "Output logs to a file under this path.",\n         "title": "Log File",\n         "type": "string"\n      },\n      "report_every": {\n         "default": 50,\n         "description": "Print stats at this interval (in steps).",\n         "title": "Report Every",\n         "type": "integer"\n      },\n      "valid_metrics": {\n         "default": [],\n         "description": "List of names of additional validation metrics.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Valid Metrics",\n         "type": "array"\n      },\n      "scoring_debug": {\n         "default": false,\n         "description": "Dump src/ref/pred of the current batch.",\n         "title": "Scoring Debug",\n         "type": "boolean"\n      },\n      "dump_preds": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Folder to dump predictions to.",\n         "title": "Dump Preds"\n      },\n      "tensorboard": {\n         "default": false,\n         "description": "Use tensorboard for visualization during training.",\n         "title": "Tensorboard",\n         "type": "boolean"\n      },\n      "tensorboard_log_dir": {\n         "default": "runs/eole",\n         "description": "Log directory for tensorboard (also the name of the run).",\n         "title": "Tensorboard Log Dir",\n         "type": "string"\n      },\n      "tensorboard_log_dir_dated": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "title": "Tensorboard Log Dir Dated"\n      },\n      "quant_layers": {\n         "default": [],\n         "description": "List of layers to be compressed in 4/8bit.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Quant Layers",\n         "type": "array"\n      },\n      "quant_type": {\n         "default": "",\n         "description": "Type of compression.",\n         "enum": [\n            "",\n            "bnb_8bit",\n            "bnb_FP4",\n            "bnb_NF4",\n            "awq_gemm",\n            "awq_gemv"\n         ],\n         "title": "Quant Type",\n         "type": "string"\n      },\n      "w_bit": {\n         "default": 4,\n         "description": "W_bit quantization",\n         "title": "W Bit",\n         "type": "integer"\n      },\n      "group_size": {\n         "default": 128,\n         "description": "Group size quantization.",\n         "title": "Group Size",\n         "type": "integer"\n      },\n      "lora_layers": {\n         "default": [],\n         "description": "List of layers to be replaced by LoRa layers. E.g. [\'linear_values\', \'linear_query\'] (\\u00a74.2 in https://arxiv.org/abs/2106.09685)",\n         "items": {\n            "type": "string"\n         },\n         "title": "Lora Layers",\n         "type": "array"\n      },\n      "lora_embedding": {\n         "default": false,\n         "description": "Replace embeddings with LoRa Embeddings (\\u00a75.1)",\n         "title": "Lora Embedding",\n         "type": "boolean"\n      },\n      "lora_rank": {\n         "default": 2,\n         "description": "r=2 successfully tested with NLLB-200 3.3B",\n         "title": "Lora Rank",\n         "type": "integer"\n      },\n      "lora_alpha": {\n         "default": 1,\n         "description": "\\u00a74.1 https://arxiv.org/abs/2106.09685",\n         "title": "Lora Alpha",\n         "type": "integer"\n      },\n      "lora_dropout": {\n         "default": 0.0,\n         "description": "Rule of thumb: same value as in main model.",\n         "title": "Lora Dropout",\n         "type": "number"\n      },\n      "beam_size": {\n         "default": 5,\n         "description": "Beam size.",\n         "title": "Beam Size",\n         "type": "integer"\n      },\n      "ratio": {\n         "default": -0.0,\n         "description": "Ratio based beam stop condition.",\n         "title": "Ratio",\n         "type": "number"\n      },\n      "top_k": {\n         "default": 0,\n         "description": "Set this to -1 to do random sampling from full distribution. Set this to value k>1 to do random sampling restricted to the k most likely next tokens. Set this to 1 to use argmax.",\n         "title": "Top K",\n         "type": "integer"\n      },\n      "top_p": {\n         "default": 0.0,\n         "description": "Probability for top-p/nucleus sampling. Restrict tokens to the most likely until the cumulated probability is over p. In range [0,1]. (https://arxiv.org/abs/1904.09751)",\n         "lte": 1.0,\n         "minimum": 0.0,\n         "title": "Top P",\n         "type": "number"\n      },\n      "temperature": {\n         "default": 1.0,\n         "description": "If doing random sampling, divide the logits by this before computing softmax during decoding.",\n         "title": "Temperature",\n         "type": "number"\n      },\n      "length_penalty": {\n         "default": "avg",\n         "description": "Length penalty to use.",\n         "enum": [\n            "avg",\n            "wu",\n            "none"\n         ],\n         "title": "Length Penalty",\n         "type": "string"\n      },\n      "alpha": {\n         "default": 1.0,\n         "description": "Length penalty parameter (higher = longer generation)",\n         "title": "Alpha",\n         "type": "number"\n      },\n      "coverage_penalty": {\n         "default": "none",\n         "description": "Coverage penalty to use. Only available in beam search.",\n         "enum": [\n            "none",\n            "wu",\n            "summary"\n         ],\n         "title": "Coverage Penalty",\n         "type": "string"\n      },\n      "beta": {\n         "default": -0.0,\n         "description": "Coverage penalty parameter.",\n         "title": "Beta",\n         "type": "number"\n      },\n      "stepwise_penalty": {\n         "default": false,\n         "description": "Apply coverage penalty at every decoding step. Helpful for summary penalty.",\n         "title": "Stepwise Penalty",\n         "type": "boolean"\n      },\n      "min_length": {\n         "default": 0,\n         "description": "Minimum prediction length.",\n         "minimum": 0,\n         "title": "Min Length",\n         "type": "integer"\n      },\n      "max_length": {\n         "default": 250,\n         "description": "Maximum prediction length.",\n         "title": "Max Length",\n         "type": "integer"\n      },\n      "max_length_ratio": {\n         "default": 2,\n         "description": "Maximum prediction length ratio. For European languages, 2 is large enough, for target Asian charageters, need to increase to 2-3, for special languages (Burmese, Amharic) to 10.",\n         "minimum": 1.0,\n         "title": "Max Length Ratio",\n         "type": "number"\n      },\n      "block_ngram_repeat": {\n         "default": 0,\n         "description": "Block repetition of ngrams during decoding.",\n         "title": "Block Ngram Repeat",\n         "type": "integer"\n      },\n      "ignore_when_blocking": {\n         "default": [],\n         "description": "Ignore these strings when blocking repeats. You want to block sentence delimiters.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Ignore When Blocking",\n         "type": "array"\n      },\n      "replace_unk": {\n         "default": false,\n         "description": "Replace the generated UNK tokens with the source token that had the highest attention weight. If phrase_table is provided, it will lok up the identified source token and give the corresponding target token. If it is not provided (or the identified source token does not exist in the table), then it will copy the source token.",\n         "title": "Replace Unk",\n         "type": "boolean"\n      },\n      "ban_unk_token": {\n         "default": false,\n         "description": "Prevent unk token generation by setting unk probability to 0.",\n         "title": "Ban Unk Token",\n         "type": "boolean"\n      },\n      "phrase_table": {\n         "default": "",\n         "description": "If phrase_table is provided (with replace_unk), it will look up the identified source token and give the corresponding target token.",\n         "title": "Phrase Table",\n         "type": "string"\n      },\n      "n_best": {\n         "default": 1,\n         "description": "Output the n_best decoded sentences.",\n         "title": "N Best",\n         "type": "integer"\n      },\n      "dump_beam": {\n         "default": "",\n         "description": "File to dump beam information to.",\n         "title": "Dump Beam",\n         "type": "string"\n      },\n      "verbose": {\n         "default": false,\n         "description": "Print scores and predictions for each input.",\n         "title": "Verbose",\n         "type": "boolean"\n      },\n      "with_score": {\n         "default": false,\n         "description": "Add a tab separated score to each output.",\n         "title": "With Score",\n         "type": "boolean"\n      },\n      "attn_debug": {\n         "default": false,\n         "description": "Print best attn for each word.",\n         "title": "Attn Debug",\n         "type": "boolean"\n      },\n      "align_debug": {\n         "default": false,\n         "description": "Print best align for each word.",\n         "title": "Align Debug",\n         "type": "boolean"\n      },\n      "gpu_ranks": {\n         "default": [],\n         "description": "List of ranks for each process.",\n         "items": {\n            "type": "integer"\n         },\n         "title": "Gpu Ranks",\n         "type": "array"\n      },\n      "world_size": {\n         "default": 1,\n         "description": "Total number of distributed processes.",\n         "title": "World Size",\n         "type": "integer"\n      },\n      "parallel_mode": {\n         "default": "data_parallel",\n         "description": "Distributed mode.",\n         "enum": [\n            "data_parallel",\n            "tensor_parallel"\n         ],\n         "title": "Parallel Mode",\n         "type": "string"\n      },\n      "gpu_backend": {\n         "default": "nccl",\n         "description": "Type of torch distributed backend.",\n         "title": "Gpu Backend",\n         "type": "string"\n      },\n      "gpu_verbose_level": {\n         "default": 0,\n         "description": "Gives more info on each process per GPU.",\n         "title": "Gpu Verbose Level",\n         "type": "integer"\n      },\n      "master_ip": {\n         "default": "localhost",\n         "description": "IP of master for torch.distributed training.",\n         "title": "Master Ip",\n         "type": "string"\n      },\n      "master_port": {\n         "default": 10000,\n         "description": "Port of master for torch.distributed training.",\n         "title": "Master Port",\n         "type": "integer"\n      },\n      "timeout": {\n         "default": 60,\n         "description": "Timeout for one GPU to wait for the others.",\n         "title": "Timeout",\n         "type": "integer"\n      },\n      "model_path": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "items": {\n                  "type": "string"\n               },\n               "type": "array"\n            }\n         ],\n         "description": "Path to model .pt file(s). Multiple models can be specified for ensemble decoding.",\n         "title": "Model Path"\n      },\n      "self_attn_backend": {\n         "default": "flash",\n         "description": "Self-attention backend.",\n         "enum": [\n            "flash",\n            "pytorch"\n         ],\n         "title": "Self Attn Backend",\n         "type": "string"\n      },\n      "compute_dtype": {\n         "description": "Compute dtype (precision) to use for main compute. Some parameters might have other dtypes for specific cases (e.g. torch.amp -- See eole.config.training.TrainingConfig.storage_dtype) fp32 to force slow fp16 model on gtx1080, int8 to enable pytorch native 8-bit quantization (cpu only).",\n         "enum": [\n            "fp32",\n            "fp16",\n            "int8",\n            "bf16"\n         ],\n         "title": "Compute Dtype",\n         "type": "string"\n      },\n      "torch_compile": {\n         "default": false,\n         "description": "Use torch.compile with dynamic=True.",\n         "title": "Torch Compile",\n         "type": "boolean"\n      },\n      "report_align": {\n         "default": false,\n         "description": "Report alignment for each translation.",\n         "title": "Report Align",\n         "type": "boolean"\n      },\n      "gold_align": {\n         "default": false,\n         "description": "Report alignment between source and gold target. Useful to test the performance of learnt alignments.",\n         "title": "Gold Align",\n         "type": "boolean"\n      },\n      "report_time": {\n         "default": false,\n         "description": "Report some translation time metrics.",\n         "title": "Report Time",\n         "type": "boolean"\n      },\n      "profile": {\n         "default": false,\n         "description": "Report pytorch profiling stats.",\n         "title": "Profile",\n         "type": "boolean"\n      },\n      "batch_size": {\n         "default": 30,\n         "description": "Batch size.",\n         "title": "Batch Size",\n         "type": "integer"\n      },\n      "batch_type": {\n         "default": "sents",\n         "description": "Batch grouping for batch size.",\n         "enum": [\n            "sents",\n            "tokens"\n         ],\n         "title": "Batch Type",\n         "type": "string"\n      },\n      "avg_raw_probs": {\n         "default": false,\n         "description": "If set, during ensembling scores from different models will be combined by averaging their raw probabilities and then taking the log. Otherwise, the log probabilities will be averaged directly. Necessary for models whose output layers can assign zero probability.",\n         "title": "Avg Raw Probs",\n         "type": "boolean"\n      },\n      "data_type": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "text",\n         "title": "Data Type"\n      },\n      "chat_template": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "title": "Chat Template"\n      },\n      "optional_eos": {\n         "anyOf": [\n            {\n               "items": {\n                  "type": "string"\n               },\n               "type": "array"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": [],\n         "description": "Optional EOS tokens that would stop generation, e.g. <|eot_id|> for Llama3",\n         "title": "Optional Eos"\n      },\n      "transforms": {\n         "anyOf": [\n            {\n               "items": {\n                  "type": "string"\n               },\n               "type": "array"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": [],\n         "title": "Transforms"\n      },\n      "transforms_configs": {\n         "anyOf": [\n            {\n               "$ref": "#/$defs/NestedAllTransformsConfig"\n            },\n            {\n               "type": "null"\n            }\n         ]\n      },\n      "share_vocab": {\n         "anyOf": [\n            {\n               "type": "boolean"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": false,\n         "title": "Share Vocab"\n      },\n      "src_subword_vocab": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "title": "Src Subword Vocab"\n      },\n      "model": {\n         "anyOf": [\n            {\n               "discriminator": {\n                  "mapping": {\n                     "cnn": "#/$defs/CnnModelConfig",\n                     "custom": "#/$defs/CustomModelConfig",\n                     "rnn": "#/$defs/RnnModelConfig",\n                     "transformer": "#/$defs/TransformerModelConfig",\n                     "transformer_encoder": "#/$defs/TransformerEncoderModelConfig",\n                     "transformer_lm": "#/$defs/TransformerLMModelConfig"\n                  },\n                  "propertyName": "architecture"\n               },\n               "oneOf": [\n                  {\n                     "$ref": "#/$defs/TransformerModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/TransformerLMModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/TransformerEncoderModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/RnnModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/CnnModelConfig"\n                  },\n                  {\n                     "$ref": "#/$defs/CustomModelConfig"\n                  }\n               ]\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "title": "Model"\n      },\n      "src": {\n         "description": "Source file to decode (one line per sequence).",\n         "title": "Src",\n         "type": "string"\n      },\n      "tgt": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "True target sequences, useful for scoring or prefix decoding.",\n         "title": "Tgt"\n      },\n      "tgt_file_prefix": {\n         "default": false,\n         "description": "Generate predictions using provided tgt as prefix.",\n         "title": "Tgt File Prefix",\n         "type": "boolean"\n      },\n      "output": {\n         "default": "pred.txt",\n         "description": "Path to output the predictions (each line will be the decoded sequence).",\n         "title": "Output",\n         "type": "string"\n      },\n      "engine": {\n         "default": "eole",\n         "description": "engine to run inference: eole or ct2",\n         "title": "Engine",\n         "type": "string"\n      }\n   },\n   "$defs": {\n      "ActivationFunction": {\n         "enum": [\n            "relu",\n            "gelu",\n            "silu",\n            "gated-gelu",\n            "gated-silu"\n         ],\n         "title": "ActivationFunction",\n         "type": "string"\n      },\n      "BARTNoiseConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "permute_sent_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Permute this proportion of sentences (boundaries defined by [\'.\', \'?\', \'!\']) in all inputs.",\n               "title": "Permute Sent Ratio"\n            },\n            "rotate_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Rotate this proportion of inputs.",\n               "title": "Rotate Ratio"\n            },\n            "insert_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Insert this percentage of additional random tokens.",\n               "title": "Insert Ratio"\n            },\n            "random_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Instead of using <mask>, use random token this often.",\n               "title": "Random Ratio"\n            },\n            "mask_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Fraction of words/subwords that will be masked.",\n               "title": "Mask Ratio"\n            },\n            "mask_length": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "subword",\n                        "word",\n                        "span-poisson"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "subword",\n               "description": "Length of masking window to apply.",\n               "title": "Mask Length"\n            },\n            "poisson_lambda": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3.0,\n               "description": "Lambda for Poisson distribution to sample span length if `-mask_length` set to span-poisson.",\n               "title": "Poisson Lambda"\n            },\n            "replace_length": {\n               "anyOf": [\n                  {\n                     "maximum": 1,\n                     "minimum": -1,\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": -1,\n               "description": "When masking N tokens, replace with 0, 1, or N tokens. (use -1 for N)",\n               "title": "Replace Length"\n            }\n         },\n         "title": "BARTNoiseConfig",\n         "type": "object"\n      },\n      "BaseTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for src (or shared).",\n               "title": "Src Subword Model"\n            },\n            "tgt_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for tgt.",\n               "title": "Tgt Subword Model"\n            },\n            "src_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (source side)",\n               "title": "Src Subword Nbest"\n            },\n            "tgt_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (target side)",\n               "title": "Tgt Subword Nbest"\n            },\n            "src_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (source side)",\n               "title": "Src Subword Alpha"\n            },\n            "tgt_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (target side)",\n               "title": "Tgt Subword Alpha"\n            },\n            "src_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for src subword. Format: <word>\\\\t<count> per line.",\n               "title": "Src Subword Vocab"\n            },\n            "tgt_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for tgt subword. Format: <word>\\\\t<count> per line.",\n               "title": "Tgt Subword Vocab"\n            },\n            "src_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce src subword in src_subword_vocab with frequency >= src_vocab_threshold.",\n               "title": "Src Vocab Threshold"\n            },\n            "tgt_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce tgt subword in tgt_subword_vocab with frequency >= tgt_vocab_threshold.",\n               "title": "Tgt Vocab Threshold"\n            }\n         },\n         "title": "BaseTokenizerConfig",\n         "type": "object"\n      },\n      "CleanConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_eq_tgt": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex src==tgt",\n               "title": "Src Eq Tgt"\n            },\n            "same_char": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex with same char more than 4 times",\n               "title": "Same Char"\n            },\n            "same_word": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex with same word more than 3 times",\n               "title": "Same Word"\n            },\n            "scripts_ok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Latin",\n                  "Common"\n               ],\n               "description": "list of unicodata scripts accepted",\n               "title": "Scripts Ok"\n            },\n            "scripts_nok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "description": "list of unicodata scripts not accepted",\n               "title": "Scripts Nok"\n            },\n            "src_tgt_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 2.0,\n               "description": "ratio between src and tgt",\n               "title": "Src Tgt Ratio"\n            },\n            "avg_tok_min": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3.0,\n               "description": "average length of tokens min",\n               "title": "Avg Tok Min"\n            },\n            "avg_tok_max": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 20.0,\n               "description": "average length of tokens max",\n               "title": "Avg Tok Max"\n            },\n            "langid": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "description": "list of languages accepted",\n               "title": "Langid"\n            }\n         },\n         "title": "CleanConfig",\n         "type": "object"\n      },\n      "CnnDecoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "decoder_type": {\n               "const": "cnn",\n               "default": "cnn",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "cnn_kernel_width": {\n               "default": 3,\n               "description": "Size of windows in the cnn, the kernel_size is (cnn_kernel_width, 1) in convolution layers.",\n               "title": "Cnn Kernel Width",\n               "type": "integer"\n            }\n         },\n         "title": "CnnDecoderConfig",\n         "type": "object"\n      },\n      "CnnEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "const": "cnn",\n               "default": "cnn",\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "cnn_kernel_width": {\n               "default": 3,\n               "description": "Size of windows in the cnn, the kernel_size is (cnn_kernel_width, 1) in convolution layers.",\n               "title": "Cnn Kernel Width",\n               "type": "integer"\n            }\n         },\n         "title": "CnnEncoderConfig",\n         "type": "object"\n      },\n      "CnnModelConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": -1,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "cnn",\n               "default": "cnn",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "cnn_kernel_width": {\n               "default": 3,\n               "description": "Size of windows in the cnn, the kernel_size is (cnn_kernel_width, 1) in convolution layers.",\n               "title": "Cnn Kernel Width",\n               "type": "integer"\n            }\n         },\n         "title": "CnnModelConfig",\n         "type": "object"\n      },\n      "CustomModelConfig": {\n         "additionalProperties": false,\n         "description": "Wrap anything that does not fit a set common architecture.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": -1,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "custom",\n               "default": "custom",\n               "title": "Architecture",\n               "type": "string"\n            }\n         },\n         "title": "CustomModelConfig",\n         "type": "object"\n      },\n      "DocifyConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "doc_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 200,\n               "description": "Number of tokens per doc.",\n               "title": "Doc Length"\n            },\n            "max_context": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Max context segments.",\n               "title": "Max Context"\n            }\n         },\n         "title": "DocifyConfig",\n         "type": "object"\n      },\n      "EmbeddingsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "freeze_word_vecs_enc": {\n               "default": false,\n               "description": "Freeze word embeddings on the encoder side.",\n               "title": "Freeze Word Vecs Enc",\n               "type": "boolean"\n            },\n            "freeze_word_vecs_dec": {\n               "default": false,\n               "description": "Freeze word embeddings on the encoder side.",\n               "title": "Freeze Word Vecs Dec",\n               "type": "boolean"\n            },\n            "position_encoding": {\n               "default": false,\n               "description": "Absolute position encoding, see position_encoding_type. Necessary for non-RNN style models.",\n               "title": "Position Encoding",\n               "type": "boolean"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "position_shift": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Positions IDS shift before making position embed dirty patch to cover for xlm-roberta-xl",\n               "title": "Position Shift"\n            }\n         },\n         "title": "EmbeddingsConfig",\n         "type": "object"\n      },\n      "FilterTooLongConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_seq_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 192,\n               "description": "Maximum source sequence length.",\n               "title": "Src Seq Length"\n            },\n            "tgt_seq_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 192,\n               "description": "Maximum target sequence length.",\n               "title": "Tgt Seq Length"\n            }\n         },\n         "title": "FilterTooLongConfig",\n         "type": "object"\n      },\n      "HuggingfaceTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Huggingface Model"\n            },\n            "max_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Max Length"\n            }\n         },\n         "title": "HuggingfaceTokenizerConfig",\n         "type": "object"\n      },\n      "InlineTagsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tags_dictionary_path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path to a flat term dictionary.",\n               "title": "Tags Dictionary Path"\n            },\n            "tags_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.1,\n               "description": "Ratio of corpus to augment with tags.",\n               "title": "Tags Corpus Ratio"\n            },\n            "max_tags": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 12,\n               "description": "Maximum number of tags that can be added to a single sentence.",\n               "title": "Max Tags"\n            },\n            "paired_stag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_beg\\uff60",\n               "description": "The format of an opening paired inline tag. Must include the character #.",\n               "title": "Paired Stag"\n            },\n            "paired_etag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_end\\uff60",\n               "description": "The format of a closing paired inline tag. Must include the character #.",\n               "title": "Paired Etag"\n            },\n            "isolated_tag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_std\\uff60",\n               "description": "The format of an isolated inline tag. Must include the character #.",\n               "title": "Isolated Tag"\n            },\n            "src_delimiter": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ffuzzy\\uff60",\n               "description": "Any special token used for augmented src sentences. The default is the fuzzy token used in the FuzzyMatch transform.",\n               "title": "Src Delimiter"\n            }\n         },\n         "title": "InlineTagsConfig",\n         "type": "object"\n      },\n      "InsertMaskBeforePlaceholderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "response_patterns": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Response : \\uff5fnewline\\uff60"\n               ],\n               "description": "Response pattern to locate the end of the prompt.",\n               "title": "Response Patterns"\n            }\n         },\n         "title": "InsertMaskBeforePlaceholderConfig",\n         "type": "object"\n      },\n      "MeanEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "const": "mean",\n               "default": "mean",\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            }\n         },\n         "title": "MeanEncoderConfig",\n         "type": "object"\n      },\n      "NestedAllTransformsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "switchout": {\n               "$ref": "#/$defs/SwitchOutConfig",\n               "default": {\n                  "switchout_temperature": 1.0\n               }\n            },\n            "tokendrop": {\n               "$ref": "#/$defs/TokenDropConfig",\n               "default": {\n                  "tokendrop_temperature": 1.0\n               }\n            },\n            "tokenmask": {\n               "$ref": "#/$defs/TokenMaskConfig",\n               "default": {\n                  "tokenmask_temperature": 1.0\n               }\n            },\n            "sentencepiece": {\n               "$ref": "#/$defs/BaseTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0\n               }\n            },\n            "bpe": {\n               "$ref": "#/$defs/BaseTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0\n               }\n            },\n            "onmt_tokenize": {\n               "$ref": "#/$defs/ONMTTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0,\n                  "src_subword_type": "none",\n                  "tgt_subword_type": "none",\n                  "src_onmttok_kwargs": {\n                     "mode": "none"\n                  },\n                  "tgt_onmttok_kwargs": {\n                     "mode": "none"\n                  },\n                  "gpt2_pretok": false,\n                  "mapped_tokens": null\n               }\n            },\n            "inlinetags": {\n               "$ref": "#/$defs/InlineTagsConfig",\n               "default": {\n                  "tags_dictionary_path": null,\n                  "tags_corpus_ratio": 0.1,\n                  "max_tags": 12,\n                  "paired_stag": "\\uff5fph_#_beg\\uff60",\n                  "paired_etag": "\\uff5fph_#_end\\uff60",\n                  "isolated_tag": "\\uff5fph_#_std\\uff60",\n                  "src_delimiter": "\\uff5ffuzzy\\uff60"\n               }\n            },\n            "huggingface_tokenize": {\n               "$ref": "#/$defs/HuggingfaceTokenizerConfig",\n               "default": {\n                  "path": null,\n                  "huggingface_model": null,\n                  "max_length": null\n               }\n            },\n            "uppercase": {\n               "$ref": "#/$defs/UpperCaseConfig",\n               "default": {\n                  "upper_corpus_ratio": 0.01\n               }\n            },\n            "bart": {\n               "$ref": "#/$defs/BARTNoiseConfig",\n               "default": {\n                  "permute_sent_ratio": 0.0,\n                  "rotate_ratio": 0.0,\n                  "insert_ratio": 0.0,\n                  "random_ratio": 0.0,\n                  "mask_ratio": 0.0,\n                  "mask_length": "subword",\n                  "poisson_lambda": 3.0,\n                  "replace_length": -1\n               }\n            },\n            "docify": {\n               "$ref": "#/$defs/DocifyConfig",\n               "default": {\n                  "doc_length": 200,\n                  "max_context": 1\n               }\n            },\n            "normalize": {\n               "$ref": "#/$defs/NormalizeConfig",\n               "default": {\n                  "src_lang": "",\n                  "tgt_lang": "",\n                  "penn": true,\n                  "norm_quote_commas": true,\n                  "norm_numbers": true,\n                  "pre_replace_unicode_punct": false,\n                  "post_remove_control_chars": false\n               }\n            },\n            "terminology": {\n               "$ref": "#/$defs/TerminologyConfig",\n               "default": {\n                  "termbase_path": null,\n                  "src_spacy_language_model": null,\n                  "tgt_spacy_language_model": null,\n                  "term_corpus_ratio": 0.3,\n                  "term_example_ratio": 0.2,\n                  "src_term_stoken": "\\uff5fsrc_term_start\\uff60",\n                  "tgt_term_stoken": "\\uff5ftgt_term_start\\uff60",\n                  "tgt_term_etoken": "\\uff5ftgt_term_end\\uff60",\n                  "term_source_delimiter": "\\uff5ffuzzy\\uff60"\n               }\n            },\n            "clean": {\n               "$ref": "#/$defs/CleanConfig",\n               "default": {\n                  "src_eq_tgt": false,\n                  "same_char": false,\n                  "same_word": false,\n                  "scripts_ok": [\n                     "Latin",\n                     "Common"\n                  ],\n                  "scripts_nok": [],\n                  "src_tgt_ratio": 2.0,\n                  "avg_tok_min": 3.0,\n                  "avg_tok_max": 20.0,\n                  "langid": []\n               }\n            },\n            "filtertoolong": {\n               "$ref": "#/$defs/FilterTooLongConfig",\n               "default": {\n                  "src_seq_length": 192,\n                  "tgt_seq_length": 192\n               }\n            },\n            "prefix": {\n               "$ref": "#/$defs/PrefixConfig",\n               "default": {\n                  "src_prefix": "",\n                  "tgt_prefix": ""\n               }\n            },\n            "suffix": {\n               "$ref": "#/$defs/SuffixConfig",\n               "default": {\n                  "src_suffix": "",\n                  "tgt_suffix": ""\n               }\n            },\n            "insert_mask_before_placeholder": {\n               "$ref": "#/$defs/InsertMaskBeforePlaceholderConfig",\n               "default": {\n                  "response_patterns": [\n                     "Response : \\uff5fnewline\\uff60"\n                  ]\n               }\n            }\n         },\n         "title": "NestedAllTransformsConfig",\n         "type": "object"\n      },\n      "NormalizeConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Source language code",\n               "title": "Src Lang"\n            },\n            "tgt_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Target language code",\n               "title": "Tgt Lang"\n            },\n            "penn": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Penn substitution",\n               "title": "Penn"\n            },\n            "norm_quote_commas": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Normalize quotations and commas",\n               "title": "Norm Quote Commas"\n            },\n            "norm_numbers": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Normalize numbers",\n               "title": "Norm Numbers"\n            },\n            "pre_replace_unicode_punct": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Replace unicode punct",\n               "title": "Pre Replace Unicode Punct"\n            },\n            "post_remove_control_chars": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove control chars",\n               "title": "Post Remove Control Chars"\n            }\n         },\n         "title": "NormalizeConfig",\n         "type": "object"\n      },\n      "ONMTTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for src (or shared).",\n               "title": "Src Subword Model"\n            },\n            "tgt_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for tgt.",\n               "title": "Tgt Subword Model"\n            },\n            "src_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (source side)",\n               "title": "Src Subword Nbest"\n            },\n            "tgt_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (target side)",\n               "title": "Tgt Subword Nbest"\n            },\n            "src_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (source side)",\n               "title": "Src Subword Alpha"\n            },\n            "tgt_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (target side)",\n               "title": "Tgt Subword Alpha"\n            },\n            "src_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for src subword. Format: <word>\\\\t<count> per line.",\n               "title": "Src Subword Vocab"\n            },\n            "tgt_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for tgt subword. Format: <word>\\\\t<count> per line.",\n               "title": "Tgt Subword Vocab"\n            },\n            "src_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce src subword in src_subword_vocab with frequency >= src_vocab_threshold.",\n               "title": "Src Vocab Threshold"\n            },\n            "tgt_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce tgt subword in tgt_subword_vocab with frequency >= tgt_vocab_threshold.",\n               "title": "Tgt Vocab Threshold"\n            },\n            "src_subword_type": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "none",\n                        "sentencepiece",\n                        "bpe"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "none",\n               "description": "Type of subword model for src (or shared) in pyonmttok.",\n               "title": "Src Subword Type"\n            },\n            "tgt_subword_type": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "none",\n                        "sentencepiece",\n                        "bpe"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "none",\n               "description": "Type of subword model for tgt in pyonmttok.",\n               "title": "Tgt Subword Type"\n            },\n            "src_onmttok_kwargs": {\n               "anyOf": [\n                  {\n                     "type": "object"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": {\n                  "mode": "none"\n               },\n               "description": "Other pyonmttok options for src in dict string, except subword related options listed earlier.",\n               "title": "Src Onmttok Kwargs"\n            },\n            "tgt_onmttok_kwargs": {\n               "anyOf": [\n                  {\n                     "type": "object"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": {\n                  "mode": "none"\n               },\n               "description": "Other pyonmttok options for tgt in dict string, except subword related options listed earlier.",\n               "title": "Tgt Onmttok Kwargs"\n            },\n            "gpt2_pretok": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Preprocess sentence with byte-level mapping.",\n               "title": "Gpt2 Pretok"\n            },\n            "mapped_tokens": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "maxItems": 2,\n                        "minItems": 2,\n                        "prefixItems": [\n                           {\n                              "type": "string"\n                           },\n                           {\n                              "type": "string"\n                           }\n                        ],\n                        "type": "array"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Mapped tokens for placeholders preservation",\n               "title": "Mapped Tokens"\n            }\n         },\n         "title": "ONMTTokenizerConfig",\n         "type": "object"\n      },\n      "PositionEncodingType": {\n         "enum": [\n            "SinusoidalInterleaved",\n            "SinusoidalConcat",\n            "Learned",\n            "Relative",\n            "Rotary",\n            "Alibi"\n         ],\n         "title": "PositionEncodingType",\n         "type": "string"\n      },\n      "PrefixConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to prepend to all source examples.",\n               "title": "Src Prefix"\n            },\n            "tgt_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to prepend to all target examples.",\n               "title": "Tgt Prefix"\n            }\n         },\n         "title": "PrefixConfig",\n         "type": "object"\n      },\n      "RnnDecoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "decoder_type": {\n               "const": "rnn",\n               "default": "rnn",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "bridge": {\n               "default": false,\n               "description": "Have an additional layer between the last encoder state and the first decoder state (RNN specific).",\n               "title": "Bridge",\n               "type": "boolean"\n            },\n            "rnn_type": {\n               "default": "LSTM",\n               "description": "The gate type to use in the RNNs.",\n               "enum": [\n                  "LSTM",\n                  "GRU"\n               ],\n               "title": "Rnn Type",\n               "type": "string"\n            },\n            "context_gate": {\n               "default": null,\n               "description": "Type of context gate to use.",\n               "enum": [\n                  "source",\n                  "target",\n                  "both",\n                  null\n               ],\n               "title": "Context Gate"\n            },\n            "bidirectional_encoder": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "title": "Bidirectional Encoder"\n            }\n         },\n         "title": "RnnDecoderConfig",\n         "type": "object"\n      },\n      "RnnEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "default": "rnn",\n               "enum": [\n                  "rnn",\n                  "brnn"\n               ],\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "bridge": {\n               "default": false,\n               "description": "Have an additional layer between the last encoder state and the first decoder state (RNN specific).",\n               "title": "Bridge",\n               "type": "boolean"\n            },\n            "rnn_type": {\n               "default": "LSTM",\n               "description": "The gate type to use in the RNNs.",\n               "enum": [\n                  "LSTM",\n                  "GRU"\n               ],\n               "title": "Rnn Type",\n               "type": "string"\n            }\n         },\n         "title": "RnnEncoderConfig",\n         "type": "object"\n      },\n      "RnnModelConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": -1,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "rnn",\n               "default": "rnn",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "bridge": {\n               "default": false,\n               "description": "Have an additional layer between the last encoder state and the first decoder state (RNN specific).",\n               "title": "Bridge",\n               "type": "boolean"\n            },\n            "rnn_type": {\n               "default": "LSTM",\n               "description": "The gate type to use in the RNNs.",\n               "enum": [\n                  "LSTM",\n                  "GRU"\n               ],\n               "title": "Rnn Type",\n               "type": "string"\n            }\n         },\n         "title": "RnnModelConfig",\n         "type": "object"\n      },\n      "RotaryPositionConfig": {\n         "additionalProperties": false,\n         "description": "Configuration for rotary position embeddings used in transformer models.",\n         "properties": {\n            "rotary_interleave": {\n               "default": true,\n               "description": "Interleave the head dimensions when rotary embeddings are applied. Otherwise the head dimensions are sliced in half. (True= Llama from Meta (original), False= used by all HuggingFace models)",\n               "title": "Rotary Interleave",\n               "type": "boolean"\n            },\n            "rotary_theta": {\n               "default": 10000,\n               "description": "Rotary theta base length, 1e4 for Llama2.Mistral, 1e6 for Mixtral",\n               "title": "Rotary Theta",\n               "type": "integer"\n            },\n            "rotary_dim": {\n               "default": 0,\n               "description": "Rotary dim when model requires it to be different to head dim.",\n               "title": "Rotary Dim",\n               "type": "integer"\n            },\n            "scaling_type": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Specifies the type of RoPE scaling to be applied, if any.",\n               "title": "Scaling Type"\n            },\n            "scaling_factor": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 8.0,\n               "description": "Factor by which to scale RoPE embeddings.",\n               "title": "Scaling Factor"\n            },\n            "low_freq_factor": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Scaling factor applied to the lower frequency components of RoPE.",\n               "title": "Low Freq Factor"\n            },\n            "high_freq_factor": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 4.0,\n               "description": "Scaling factor applied to the higher frequency components of RoPE.",\n               "title": "High Freq Factor"\n            },\n            "original_max_position_embeddings": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 8192,\n               "description": "Original maximum position embeddings for RoPE scaling.",\n               "title": "Original Max Position Embeddings"\n            }\n         },\n         "title": "RotaryPositionConfig",\n         "type": "object"\n      },\n      "SuffixConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to append to all source examples.",\n               "title": "Src Suffix"\n            },\n            "tgt_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to append to all target examples.",\n               "title": "Tgt Suffix"\n            }\n         },\n         "title": "SuffixConfig",\n         "type": "object"\n      },\n      "SwitchOutConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "switchout_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for SwitchOut. :math:`\\\\tau^{-1}` in :cite:`DBLP:journals/corr/abs-1808-07512`. Smaller value makes data more diverse.",\n               "title": "Switchout Temperature"\n            }\n         },\n         "title": "SwitchOutConfig",\n         "type": "object"\n      },\n      "TerminologyConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "termbase_path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path to a dictionary file with terms.",\n               "title": "Termbase Path"\n            },\n            "src_spacy_language_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Name of the spaCy language model for the source corpus.",\n               "title": "Src Spacy Language Model"\n            },\n            "tgt_spacy_language_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Name of the spaCy language model for the target corpus.",\n               "title": "Tgt Spacy Language Model"\n            },\n            "term_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.3,\n               "description": "Ratio of corpus to augment with terms.",\n               "title": "Term Corpus Ratio"\n            },\n            "term_example_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.2,\n               "description": "Maximum terms allowed in an example.",\n               "title": "Term Example Ratio"\n            },\n            "src_term_stoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fsrc_term_start\\uff60",\n               "description": "The source term start token.",\n               "title": "Src Term Stoken"\n            },\n            "tgt_term_stoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ftgt_term_start\\uff60",\n               "description": "The target term start token.",\n               "title": "Tgt Term Stoken"\n            },\n            "tgt_term_etoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ftgt_term_end\\uff60",\n               "description": "The target term end token.",\n               "title": "Tgt Term Etoken"\n            },\n            "term_source_delimiter": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ffuzzy\\uff60",\n               "description": "Any special token used for augmented source sentences. The default is the fuzzy token used in the FuzzyMatch transform.",\n               "title": "Term Source Delimiter"\n            }\n         },\n         "title": "TerminologyConfig",\n         "type": "object"\n      },\n      "TokenDropConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tokendrop_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for token deletion.",\n               "title": "Tokendrop Temperature"\n            }\n         },\n         "title": "TokenDropConfig",\n         "type": "object"\n      },\n      "TokenMaskConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tokenmask_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for token masking.",\n               "title": "Tokenmask Temperature"\n            }\n         },\n         "title": "TokenMaskConfig",\n         "type": "object"\n      },\n      "TransformerDecoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "decoder_type": {\n               "const": "transformer",\n               "default": "transformer",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            },\n            "aan_useffn": {\n               "default": false,\n               "description": "Turn on the FFN layer in the AAN decoder.",\n               "title": "Aan Useffn",\n               "type": "boolean"\n            },\n            "alignment_layer": {\n               "default": -2,\n               "description": "Layer number which has to be supervised.",\n               "title": "Alignment Layer",\n               "type": "integer"\n            },\n            "alignment_heads": {\n               "default": 0,\n               "description": "Number of cross attention heads per layer to supervise with.",\n               "title": "Alignment Heads",\n               "type": "integer"\n            },\n            "full_context_alignment": {\n               "default": false,\n               "description": "Whether alignment is conditioned on full target context.",\n               "title": "Full Context Alignment",\n               "type": "boolean"\n            },\n            "lambda_align": {\n               "default": 0.0,\n               "description": "Lambda value for alignement loss of Garg et al, 2019 (https://arxiv.org/abs/1909.02074)",\n               "title": "Lambda Align",\n               "type": "number"\n            }\n         },\n         "title": "TransformerDecoderConfig",\n         "type": "object"\n      },\n      "TransformerEncoderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "encoder_type": {\n               "const": "transformer",\n               "default": "transformer",\n               "title": "Encoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the encoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of encoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "src_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for src.",\n               "title": "Src Word Vec Size",\n               "type": "integer"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerEncoderConfig",\n         "type": "object"\n      },\n      "TransformerEncoderModelConfig": {\n         "additionalProperties": false,\n         "description": "Facilitate setting some transformer specific params at model level.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder",\n               "type": "null"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "transformer_encoder",\n               "default": "transformer_encoder",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerEncoderModelConfig",\n         "type": "object"\n      },\n      "TransformerLMDecoderConfig": {\n         "additionalProperties": false,\n         "description": "Right now just wraps TransformerDecoderConfig for simplicity.\\nMight merge in a single class later once TransformerLM path is clarified.",\n         "properties": {\n            "decoder_type": {\n               "const": "transformer_lm",\n               "default": "transformer_lm",\n               "title": "Decoder Type",\n               "type": "string"\n            },\n            "layers": {\n               "default": 2,\n               "description": "Number of layers in the decoder.",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "hidden_size": {\n               "default": 512,\n               "description": "Size of decoder hidden states.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "tgt_word_vec_size": {\n               "default": 512,\n               "description": "Word embedding size for tgt.",\n               "title": "Tgt Word Vec Size",\n               "type": "integer"\n            },\n            "coverage_attn": {\n               "default": false,\n               "description": "Train a coverage attention layer.",\n               "title": "Coverage Attn",\n               "type": "boolean"\n            },\n            "lambda_coverage": {\n               "default": 0.0,\n               "description": "Lambda value for coverage loss of See et al (2017)",\n               "title": "Lambda Coverage",\n               "type": "number"\n            },\n            "global_attention": {\n               "default": "general",\n               "description": "The attention type to use. (Luong=general, Bahdanau=MLP)",\n               "enum": [\n                  "dot",\n                  "general",\n                  "mlp",\n                  null\n               ],\n               "title": "Global Attention"\n            },\n            "global_attention_function": {\n               "default": "softmax",\n               "description": "Global attention function to use.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Global Attention Function",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            },\n            "aan_useffn": {\n               "default": false,\n               "description": "Turn on the FFN layer in the AAN decoder.",\n               "title": "Aan Useffn",\n               "type": "boolean"\n            },\n            "alignment_layer": {\n               "default": -2,\n               "description": "Layer number which has to be supervised.",\n               "title": "Alignment Layer",\n               "type": "integer"\n            },\n            "alignment_heads": {\n               "default": 0,\n               "description": "Number of cross attention heads per layer to supervise with.",\n               "title": "Alignment Heads",\n               "type": "integer"\n            },\n            "full_context_alignment": {\n               "default": false,\n               "description": "Whether alignment is conditioned on full target context.",\n               "title": "Full Context Alignment",\n               "type": "boolean"\n            },\n            "lambda_align": {\n               "default": 0.0,\n               "description": "Lambda value for alignement loss of Garg et al, 2019 (https://arxiv.org/abs/1909.02074)",\n               "title": "Lambda Align",\n               "type": "number"\n            }\n         },\n         "title": "TransformerLMDecoderConfig",\n         "type": "object"\n      },\n      "TransformerLMModelConfig": {\n         "additionalProperties": false,\n         "description": "Facilitate setting some transformer specific params at model level.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder",\n               "type": "null"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "transformer_lm",\n               "default": "transformer_lm",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerLMModelConfig",\n         "type": "object"\n      },\n      "TransformerModelConfig": {\n         "additionalProperties": false,\n         "description": "Facilitate setting some transformer specific params at model level.",\n         "properties": {\n            "embeddings": {\n               "$ref": "#/$defs/EmbeddingsConfig",\n               "description": "Contains most of the args useful to build the Embeddings module."\n            },\n            "encoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "brnn": "#/$defs/RnnEncoderConfig",\n                           "cnn": "#/$defs/CnnEncoderConfig",\n                           "mean": "#/$defs/MeanEncoderConfig",\n                           "rnn": "#/$defs/RnnEncoderConfig",\n                           "transformer": "#/$defs/TransformerEncoderConfig"\n                        },\n                        "propertyName": "encoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnEncoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/MeanEncoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of an encoder.",\n               "title": "Encoder"\n            },\n            "decoder": {\n               "anyOf": [\n                  {\n                     "discriminator": {\n                        "mapping": {\n                           "cnn": "#/$defs/CnnDecoderConfig",\n                           "rnn": "#/$defs/RnnDecoderConfig",\n                           "transformer": "#/$defs/TransformerDecoderConfig",\n                           "transformer_lm": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        "propertyName": "decoder_type"\n                     },\n                     "oneOf": [\n                        {\n                           "$ref": "#/$defs/TransformerDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/TransformerLMDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/RnnDecoderConfig"\n                        },\n                        {\n                           "$ref": "#/$defs/CnnDecoderConfig"\n                        }\n                     ]\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Major parameters of a decoder.",\n               "title": "Decoder"\n            },\n            "hidden_size": {\n               "default": -1,\n               "description": "Size of hidden states. Overwrites [encoder/decoder].hidden_size if set.",\n               "title": "Hidden Size",\n               "type": "integer"\n            },\n            "word_vec_size": {\n               "default": -1,\n               "description": "Word embedding size for src and tgt.",\n               "title": "Word Vec Size",\n               "type": "integer"\n            },\n            "layers": {\n               "default": -1,\n               "description": "Number of layers in both encoder and decoder (will overwrite enc_layers/dec_layers).",\n               "title": "Layers",\n               "type": "integer"\n            },\n            "transformer_ff": {\n               "default": 2048,\n               "description": "Size of hidden transformer feed-forward.",\n               "title": "Transformer Ff",\n               "type": "integer"\n            },\n            "share_decoder_embeddings": {\n               "default": false,\n               "description": "Use a share weight matrix for the input and output word embeddings in the decoder.",\n               "title": "Share Decoder Embeddings",\n               "type": "boolean"\n            },\n            "share_embeddings": {\n               "default": false,\n               "description": "Share the word embeddings between encoder and decoder. Need to use shared vocabulary for this option.",\n               "title": "Share Embeddings",\n               "type": "boolean"\n            },\n            "input_feed": {\n               "default": 1,\n               "description": "Feed the context vector at each time step as additional input (via concatenation with the word embeddings) to the decoder.",\n               "title": "Input Feed",\n               "type": "integer"\n            },\n            "generator_function": {\n               "default": "softmax",\n               "description": "Which function to use for generating probabilities over the target vocabulary.",\n               "enum": [\n                  "softmax",\n                  "sparsemax"\n               ],\n               "title": "Generator Function",\n               "type": "string"\n            },\n            "generator_bias": {\n               "default": true,\n               "description": "Control whether or not the generator Linear module has bias weights.",\n               "title": "Generator Bias",\n               "type": "boolean"\n            },\n            "add_estimator": {\n               "default": false,\n               "description": "Add estimator layer",\n               "title": "Add Estimator",\n               "type": "boolean"\n            },\n            "left_pad": {\n               "default": false,\n               "description": "Enable left-padding, useful for some LLMs.",\n               "title": "Left Pad",\n               "type": "boolean"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Original huggingface model.",\n               "title": "Huggingface Model"\n            },\n            "eole_version": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "0.0.1",\n               "description": "Eole version used to convert/train/save the model.",\n               "title": "Eole Version"\n            },\n            "architecture": {\n               "const": "transformer",\n               "default": "transformer",\n               "title": "Architecture",\n               "type": "string"\n            },\n            "sliding_window": {\n               "default": 0,\n               "description": "Sliding window for transformer self-attention.",\n               "title": "Sliding Window",\n               "type": "integer"\n            },\n            "heads": {\n               "default": 8,\n               "description": "Number of heads for transformer self-attention.",\n               "title": "Heads",\n               "type": "integer"\n            },\n            "relative_positions_buckets": {\n               "default": 0,\n               "description": "Enable relative position bias (https://github.com/google-research/text-to-text-transfer-transformer).",\n               "title": "Relative Positions Buckets",\n               "type": "integer"\n            },\n            "mlp_activation_fn": {\n               "$ref": "#/$defs/ActivationFunction",\n               "default": "relu",\n               "description": "The activation function to use in MLP layer."\n            },\n            "layer_norm": {\n               "default": "standard",\n               "description": "Type of layer normalization in transformer architecture.",\n               "enum": [\n                  "standard",\n                  "rms"\n               ],\n               "title": "Layer Norm",\n               "type": "string"\n            },\n            "norm_eps": {\n               "default": 1e-06,\n               "description": "Layer norm epsilon.",\n               "title": "Norm Eps",\n               "type": "number"\n            },\n            "shared_layer_norm": {\n               "default": false,\n               "description": "Use a shared layer_norm in parallel residual attention. Note: must be True for Falcon 7B, False for Falcon 40B, same for GPT-J and GPT-NeoX models.",\n               "title": "Shared Layer Norm",\n               "type": "boolean"\n            },\n            "add_qkvbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of Query/Key/Value in MHA. Note: this will add bias to output projection layer too by default. Can be disabled with `add_final_linear_bias`.",\n               "title": "Add Qkvbias",\n               "type": "boolean"\n            },\n            "add_final_linear_bias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of final_linear in MHA.",\n               "title": "Add Final Linear Bias",\n               "type": "boolean"\n            },\n            "heads_kv": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Number of heads for KV. heads_kv=heads if None, else number of heads for KV(e.g. Falcon 40B)",\n               "title": "Heads Kv"\n            },\n            "head_dim": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Head dimension when this needs to be different vs hidden_size // heads",\n               "title": "Head Dim"\n            },\n            "add_ffnbias": {\n               "default": false,\n               "description": "Add bias to nn.Linear of MLP FFN.",\n               "title": "Add Ffnbias",\n               "type": "boolean"\n            },\n            "parallel_residual": {\n               "default": false,\n               "description": "Use parallel residual in decoder layer. Note: this is used by GPT-J / Falcon Architecture.",\n               "title": "Parallel Residual",\n               "type": "boolean"\n            },\n            "num_experts": {\n               "default": 0,\n               "description": "Number of experts for MoE models.",\n               "title": "Num Experts",\n               "type": "integer"\n            },\n            "num_experts_per_tok": {\n               "default": 2,\n               "description": "Number of experts per token.",\n               "title": "Num Experts Per Tok",\n               "type": "integer"\n            },\n            "position_encoding_type": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/PositionEncodingType"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "SinusoidalInterleaved",\n               "description": "Type of positional encoding."\n            },\n            "n_positions": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Two casesCase 1: Absolute number of positions to learn position embeddings on (position_encoding_type: Learned)Case 2: Max Relative PositionsIn the case of position_encoding_type: Relative",\n               "title": "N Positions"\n            },\n            "rope_config": {\n               "anyOf": [\n                  {\n                     "$ref": "#/$defs/RotaryPositionConfig"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Rotary position config, if relevant."\n            }\n         },\n         "title": "TransformerModelConfig",\n         "type": "object"\n      },\n      "UpperCaseConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "upper_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.01,\n               "description": "Corpus ratio to apply uppercasing.",\n               "title": "Upper Corpus Ratio"\n            }\n         },\n         "title": "UpperCaseConfig",\n         "type": "object"\n      }\n   },\n   "additionalProperties": false,\n   "required": [\n      "model_path",\n      "src"\n   ]\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = forbid"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"arbitrary_types_allowed"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.engine",children:(0,i.jsx)(e.code,{children:"engine (str)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.model",children:(0,i.jsx)(e.code,{children:"model (eole.config.models.TransformerModelConfig | eole.config.models.TransformerLMModelConfig | eole.config.models.TransformerEncoderModelConfig | eole.config.models.RnnModelConfig | eole.config.models.CnnModelConfig | eole.config.models.CustomModelConfig | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.model_path",children:(0,i.jsx)(e.code,{children:"model_path (str | List[str])"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.output",children:(0,i.jsx)(e.code,{children:"output (str)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.share_vocab",children:(0,i.jsx)(e.code,{children:"share_vocab (bool | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.src",children:(0,i.jsx)(e.code,{children:"src (str)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.src_subword_vocab",children:(0,i.jsx)(e.code,{children:"src_subword_vocab (str | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.tgt",children:(0,i.jsx)(e.code,{children:"tgt (str | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.tgt_file_prefix",children:(0,i.jsx)(e.code,{children:"tgt_file_prefix (bool)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.transforms",children:(0,i.jsx)(e.code,{children:"transforms (List[str] | None)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.transforms_configs",children:(0,i.jsx)(e.code,{children:"transforms_configs (eole.config.data.NestedAllTransformsConfig | None)"})})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validators:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"_validate_model_path"})," \xbb ",(0,i.jsx)(e.a,{href:"#eole.config.run.PredictConfig.model_path",children:(0,i.jsx)(e.code,{children:"model_path"})})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"_validate_predict_config"})," \xbb ",(0,i.jsx)(e.code,{children:"all fields"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-engine--str--eole",children:[(0,i.jsx)(e.em,{children:"field"})," engine ",(0,i.jsx)(e.em,{children:": str"})," ",(0,i.jsx)(e.em,{children:"= 'eole'"})]}),"\n",(0,i.jsx)(e.p,{children:"engine to run inference: eole or ct2"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-model--transformermodelconfig--transformerlmmodelconfig--transformerencodermodelconfig--rnnmodelconfig--cnnmodelconfig--custommodelconfig--none--none-1",children:[(0,i.jsx)(e.em,{children:"field"})," model ",(0,i.jsxs)(e.em,{children:[": ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.TransformerModelConfig",children:"TransformerModelConfig"})," | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.TransformerLMModelConfig",children:"TransformerLMModelConfig"})," | TransformerEncoderModelConfig | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.RnnModelConfig",children:"RnnModelConfig"})," | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.CnnModelConfig",children:"CnnModelConfig"})," | ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/models#eole.config.models.CustomModelConfig",children:"CustomModelConfig"})," | None"]})," ",(0,i.jsx)(e.em,{children:"= None"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-model_path--str--liststr-required",children:[(0,i.jsx)(e.em,{children:"field"})," model_path ",(0,i.jsx)(e.em,{children:": str | List[str]"})," ",(0,i.jsx)(e.em,{children:"[Required]"})]}),"\n",(0,i.jsx)(e.p,{children:"Path to model .pt file(s). Multiple models can be specified for ensemble decoding."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_model_path"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-output--str--predtxt",children:[(0,i.jsx)(e.em,{children:"field"})," output ",(0,i.jsx)(e.em,{children:": str"})," ",(0,i.jsx)(e.em,{children:"= 'pred.txt'"})]}),"\n",(0,i.jsx)(e.p,{children:"Path to output the predictions (each line will be the decoded sequence)."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-share_vocab--bool--none--false",children:[(0,i.jsx)(e.em,{children:"field"})," share_vocab ",(0,i.jsx)(e.em,{children:": bool | None"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-src--str-required",children:[(0,i.jsx)(e.em,{children:"field"})," src ",(0,i.jsx)(e.em,{children:": str"})," ",(0,i.jsx)(e.em,{children:"[Required]"})]}),"\n",(0,i.jsx)(e.p,{children:"Source file to decode (one line per sequence)."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-src_subword_vocab--str--none--none",children:[(0,i.jsx)(e.em,{children:"field"})," src_subword_vocab ",(0,i.jsx)(e.em,{children:": str | None"})," ",(0,i.jsx)(e.em,{children:"= None"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-tgt--str--none--none",children:[(0,i.jsx)(e.em,{children:"field"})," tgt ",(0,i.jsx)(e.em,{children:": str | None"})," ",(0,i.jsx)(e.em,{children:"= None"})]}),"\n",(0,i.jsx)(e.p,{children:"True target sequences, useful for scoring or prefix decoding."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-tgt_file_prefix--bool--false",children:[(0,i.jsx)(e.em,{children:"field"})," tgt_file_prefix ",(0,i.jsx)(e.em,{children:": bool"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsx)(e.p,{children:"Generate predictions using provided tgt as prefix."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-transforms--liststr--none--",children:[(0,i.jsx)(e.em,{children:"field"})," transforms ",(0,i.jsx)(e.em,{children:": List[str] | None"})," ",(0,i.jsx)(e.em,{children:"= []"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-transforms_configs--nestedalltransformsconfig--none-optional",children:[(0,i.jsx)(e.em,{children:"field"})," transforms_configs ",(0,i.jsxs)(e.em,{children:[": ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/data#eole.config.data.NestedAllTransformsConfig",children:"NestedAllTransformsConfig"})," | None"]})," ",(0,i.jsx)(e.em,{children:"[Optional]"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_predict_config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_running_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"model_post_initcontext-any--1",children:"model_post_init(context: Any, /)"}),"\n",(0,i.jsx)(e.p,{children:"This function is meant to behave like a BaseModel method to initialise private attributes."}),"\n",(0,i.jsx)(e.p,{children:"It takes context as an argument since that\u2019s what pydantic-core passes when calling it."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"self"})," \u2013 The BaseModel instance."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"context"})," \u2013 The context."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"pydantic-model-eoleconfigrunbuildvocabconfigsource",children:[(0,i.jsx)(e.em,{children:"pydantic model"})," eole.config.run.BuildVocabConfig",(0,i.jsx)(e.a,{href:"https://github.com/eole-nlp/eole/blob/master/eole/config/run.py#L206-L245",children:"[source]"})]}),"\n",(0,i.jsxs)(e.p,{children:["Bases: ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/data#eole.config.data.DataConfig",children:(0,i.jsx)(e.code,{children:"DataConfig"})}),", ",(0,i.jsx)(e.a,{href:"#eole.config.common.MiscConfig",children:(0,i.jsx)(e.code,{children:"MiscConfig"})}),", ",(0,i.jsx)(e.a,{href:"/eole/docs/reference/Config/data#eole.config.data.BaseVocabConfig",children:(0,i.jsx)(e.code,{children:"BaseVocabConfig"})})]}),"\n",(0,i.jsx)(e.p,{}),(0,i.jsxs)(e.details,{className:"autodoc_pydantic_collapsable_json",children:["\n",(0,i.jsx)(e.summary,{children:"Show JSON schema"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "title": "BuildVocabConfig",\n   "type": "object",\n   "properties": {\n      "src_vocab": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "description": "Path to src (or shared) vocabulary file. Format: one <word> or <word>\\t<count> per line.",\n         "title": "Src Vocab"\n      },\n      "tgt_vocab": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to tgt vocabulary file. Format: one <word> or <word>\\t<count> per line.",\n         "title": "Tgt Vocab"\n      },\n      "share_vocab": {\n         "default": false,\n         "description": "Share source and target vocabulary.",\n         "title": "Share Vocab",\n         "type": "boolean"\n      },\n      "decoder_start_token": {\n         "default": "&lt;s&gt;",\n         "description": "Default decoder start token. For most models it is &lt;s&gt; = BOS. Some fairseq models require &lt;/s&gt;.",\n         "title": "Decoder Start Token",\n         "type": "string"\n      },\n      "bos_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "&lt;s&gt;",\n         "title": "Bos Token"\n      },\n      "eos_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "&lt;/s&gt;",\n         "title": "Eos Token"\n      },\n      "unk_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "<unk>",\n         "title": "Unk Token"\n      },\n      "pad_token": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": "<blank>",\n         "title": "Pad Token"\n      },\n      "both_embeddings": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to the embeddings file to use for both source and target tokens.",\n         "title": "Both Embeddings"\n      },\n      "src_embeddings": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to the embeddings file to use for source tokens.",\n         "title": "Src Embeddings"\n      },\n      "tgt_embeddings": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Path to the embeddings file to use for target tokens.",\n         "title": "Tgt Embeddings"\n      },\n      "embeddings_type": {\n         "anyOf": [\n            {\n               "enum": [\n                  "GloVe",\n                  "word2vec"\n               ],\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Type of embeddings file.",\n         "title": "Embeddings Type"\n      },\n      "seed": {\n         "default": -1,\n         "description": "Set random seed used for better reproducibility between experiments.",\n         "title": "Seed",\n         "type": "integer"\n      },\n      "src_vocab_size": {\n         "default": 32758,\n         "description": "Maximum size of the source vocabulary.",\n         "title": "Src Vocab Size",\n         "type": "integer"\n      },\n      "tgt_vocab_size": {\n         "default": 32768,\n         "description": "Maximum size of the target vocabulary.",\n         "title": "Tgt Vocab Size",\n         "type": "integer"\n      },\n      "vocab_size_multiple": {\n         "default": 8,\n         "description": "Make the vocabulary size a multiple of this value. (Adds dummy tokens if needed.)",\n         "title": "Vocab Size Multiple",\n         "type": "integer"\n      },\n      "src_words_min_frequency": {\n         "default": 0,\n         "description": "Discard source words with lower frequency.",\n         "title": "Src Words Min Frequency",\n         "type": "integer"\n      },\n      "tgt_words_min_frequency": {\n         "default": 0,\n         "description": "Discard target words with lower frequency.",\n         "title": "Tgt Words Min Frequency",\n         "type": "integer"\n      },\n      "data": {\n         "anyOf": [\n            {\n               "additionalProperties": {\n                  "$ref": "#/$defs/Dataset"\n               },\n               "type": "object"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "description": "All datasets and their specifications. See examples/*.yaml for further details.",\n         "title": "Data"\n      },\n      "transforms": {\n         "default": [],\n         "description": "Default transform pipeline to apply to data. Can be specified in each corpus of data to override.",\n         "items": {\n            "type": "string"\n         },\n         "title": "Transforms",\n         "type": "array"\n      },\n      "transforms_configs": {\n         "anyOf": [\n            {\n               "$ref": "#/$defs/NestedAllTransformsConfig"\n            },\n            {\n               "type": "null"\n            }\n         ]\n      },\n      "skip_empty_level": {\n         "default": "warning",\n         "description": "Logging level when encoutering empty examples. (silent: silently ignore/skip empty examples, warning: warn when ignoring/skipping empty examples, error: raise an error and stop execution when any empty example)",\n         "enum": [\n            "silent",\n            "warning",\n            "error"\n         ],\n         "title": "Skip Empty Level",\n         "type": "string"\n      },\n      "n_sample": {\n         "default": 5000,\n         "description": "Number of transformed samples per corpus to use to build the vocabulary. Set to -1 to use the full corpora.",\n         "title": "N Sample",\n         "type": "integer"\n      },\n      "save_data": {\n         "anyOf": [\n            {\n               "type": "string"\n            },\n            {\n               "type": "null"\n            }\n         ],\n         "default": null,\n         "description": "Output base path for objects that will be saved (vocab, transforms, embeddings, ...)",\n         "title": "Save Data"\n      },\n      "overwrite": {\n         "default": false,\n         "description": "Overwrite existing objects if any.",\n         "title": "Overwrite",\n         "type": "boolean"\n      },\n      "dump_samples": {\n         "default": false,\n         "description": "Dump samples when building vocabulary. Warning: this may slow down the process.",\n         "title": "Dump Samples",\n         "type": "boolean"\n      },\n      "num_threads": {\n         "default": 1,\n         "description": "Number of parallel threads to build the vocabulary.",\n         "title": "Num Threads",\n         "type": "integer"\n      },\n      "learn_subwords": {\n         "default": false,\n         "description": "Learn subwords (based on defined transforms) prior to building vocabulary.",\n         "title": "Learn Subwords",\n         "type": "boolean"\n      },\n      "learn_subwords_size": {\n         "default": 32000,\n         "description": "Number of subwords operations to learn.",\n         "title": "Learn Subwords Size",\n         "type": "integer"\n      },\n      "vocab_sample_queue_size": {\n         "default": 20,\n         "description": "Size of queues used for dumping samples.",\n         "title": "Vocab Sample Queue Size",\n         "type": "integer"\n      }\n   },\n   "$defs": {\n      "BARTNoiseConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "permute_sent_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Permute this proportion of sentences (boundaries defined by [\'.\', \'?\', \'!\']) in all inputs.",\n               "title": "Permute Sent Ratio"\n            },\n            "rotate_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Rotate this proportion of inputs.",\n               "title": "Rotate Ratio"\n            },\n            "insert_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Insert this percentage of additional random tokens.",\n               "title": "Insert Ratio"\n            },\n            "random_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Instead of using <mask>, use random token this often.",\n               "title": "Random Ratio"\n            },\n            "mask_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.0,\n               "description": "Fraction of words/subwords that will be masked.",\n               "title": "Mask Ratio"\n            },\n            "mask_length": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "subword",\n                        "word",\n                        "span-poisson"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "subword",\n               "description": "Length of masking window to apply.",\n               "title": "Mask Length"\n            },\n            "poisson_lambda": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3.0,\n               "description": "Lambda for Poisson distribution to sample span length if `-mask_length` set to span-poisson.",\n               "title": "Poisson Lambda"\n            },\n            "replace_length": {\n               "anyOf": [\n                  {\n                     "maximum": 1,\n                     "minimum": -1,\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": -1,\n               "description": "When masking N tokens, replace with 0, 1, or N tokens. (use -1 for N)",\n               "title": "Replace Length"\n            }\n         },\n         "title": "BARTNoiseConfig",\n         "type": "object"\n      },\n      "BaseTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for src (or shared).",\n               "title": "Src Subword Model"\n            },\n            "tgt_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for tgt.",\n               "title": "Tgt Subword Model"\n            },\n            "src_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (source side)",\n               "title": "Src Subword Nbest"\n            },\n            "tgt_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (target side)",\n               "title": "Tgt Subword Nbest"\n            },\n            "src_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (source side)",\n               "title": "Src Subword Alpha"\n            },\n            "tgt_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (target side)",\n               "title": "Tgt Subword Alpha"\n            },\n            "src_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for src subword. Format: <word>\\\\t<count> per line.",\n               "title": "Src Subword Vocab"\n            },\n            "tgt_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for tgt subword. Format: <word>\\\\t<count> per line.",\n               "title": "Tgt Subword Vocab"\n            },\n            "src_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce src subword in src_subword_vocab with frequency >= src_vocab_threshold.",\n               "title": "Src Vocab Threshold"\n            },\n            "tgt_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce tgt subword in tgt_subword_vocab with frequency >= tgt_vocab_threshold.",\n               "title": "Tgt Vocab Threshold"\n            }\n         },\n         "title": "BaseTokenizerConfig",\n         "type": "object"\n      },\n      "CleanConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_eq_tgt": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex src==tgt",\n               "title": "Src Eq Tgt"\n            },\n            "same_char": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex with same char more than 4 times",\n               "title": "Same Char"\n            },\n            "same_word": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove ex with same word more than 3 times",\n               "title": "Same Word"\n            },\n            "scripts_ok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Latin",\n                  "Common"\n               ],\n               "description": "list of unicodata scripts accepted",\n               "title": "Scripts Ok"\n            },\n            "scripts_nok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "description": "list of unicodata scripts not accepted",\n               "title": "Scripts Nok"\n            },\n            "src_tgt_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 2.0,\n               "description": "ratio between src and tgt",\n               "title": "Src Tgt Ratio"\n            },\n            "avg_tok_min": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3.0,\n               "description": "average length of tokens min",\n               "title": "Avg Tok Min"\n            },\n            "avg_tok_max": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 20.0,\n               "description": "average length of tokens max",\n               "title": "Avg Tok Max"\n            },\n            "langid": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "description": "list of languages accepted",\n               "title": "Langid"\n            }\n         },\n         "title": "CleanConfig",\n         "type": "object"\n      },\n      "Dataset": {\n         "additionalProperties": false,\n         "properties": {\n            "name": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Name"\n            },\n            "weight": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "title": "Weight"\n            },\n            "transforms": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Transforms"\n            },\n            "path_src": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Src"\n            },\n            "path_tgt": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Tgt"\n            },\n            "path_sco": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Sco"\n            },\n            "path_txt": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Txt"\n            },\n            "path_align": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path Align"\n            },\n            "src_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Src Prefix"\n            },\n            "tgt_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Tgt Prefix"\n            },\n            "src_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Src Suffix"\n            },\n            "tgt_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Tgt Suffix"\n            },\n            "src_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Src Lang"\n            },\n            "tgt_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Tgt Lang"\n            },\n            "penn": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Penn"\n            },\n            "norm_quote_commas": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Norm Quote Commas"\n            },\n            "norm_numbers": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Norm Numbers"\n            },\n            "pre_replace_unicode_punct": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "title": "Pre Replace Unicode Punct"\n            },\n            "post_remove_control_chars": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "title": "Post Remove Control Chars"\n            },\n            "src_eq_tgt": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Src Eq Tgt"\n            },\n            "same_char": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Same Char"\n            },\n            "same_word": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "title": "Same Word"\n            },\n            "scripts_ok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Latin",\n                  "Common"\n               ],\n               "title": "Scripts Ok"\n            },\n            "scripts_nok": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [],\n               "title": "Scripts Nok"\n            },\n            "src_tgt_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 2,\n               "title": "Src Tgt Ratio"\n            },\n            "avg_tok_min": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 3,\n               "title": "Avg Tok Min"\n            },\n            "avg_tok_max": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 20,\n               "title": "Avg Tok Max"\n            },\n            "lang_id": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "en",\n                  "fr"\n               ],\n               "title": "Lang Id"\n            }\n         },\n         "title": "Dataset",\n         "type": "object"\n      },\n      "DocifyConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "doc_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 200,\n               "description": "Number of tokens per doc.",\n               "title": "Doc Length"\n            },\n            "max_context": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Max context segments.",\n               "title": "Max Context"\n            }\n         },\n         "title": "DocifyConfig",\n         "type": "object"\n      },\n      "FilterTooLongConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_seq_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 192,\n               "description": "Maximum source sequence length.",\n               "title": "Src Seq Length"\n            },\n            "tgt_seq_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 192,\n               "description": "Maximum target sequence length.",\n               "title": "Tgt Seq Length"\n            }\n         },\n         "title": "FilterTooLongConfig",\n         "type": "object"\n      },\n      "HuggingfaceTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Path"\n            },\n            "huggingface_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Huggingface Model"\n            },\n            "max_length": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "title": "Max Length"\n            }\n         },\n         "title": "HuggingfaceTokenizerConfig",\n         "type": "object"\n      },\n      "InlineTagsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tags_dictionary_path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path to a flat term dictionary.",\n               "title": "Tags Dictionary Path"\n            },\n            "tags_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.1,\n               "description": "Ratio of corpus to augment with tags.",\n               "title": "Tags Corpus Ratio"\n            },\n            "max_tags": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 12,\n               "description": "Maximum number of tags that can be added to a single sentence.",\n               "title": "Max Tags"\n            },\n            "paired_stag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_beg\\uff60",\n               "description": "The format of an opening paired inline tag. Must include the character #.",\n               "title": "Paired Stag"\n            },\n            "paired_etag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_end\\uff60",\n               "description": "The format of a closing paired inline tag. Must include the character #.",\n               "title": "Paired Etag"\n            },\n            "isolated_tag": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fph_#_std\\uff60",\n               "description": "The format of an isolated inline tag. Must include the character #.",\n               "title": "Isolated Tag"\n            },\n            "src_delimiter": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ffuzzy\\uff60",\n               "description": "Any special token used for augmented src sentences. The default is the fuzzy token used in the FuzzyMatch transform.",\n               "title": "Src Delimiter"\n            }\n         },\n         "title": "InlineTagsConfig",\n         "type": "object"\n      },\n      "InsertMaskBeforePlaceholderConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "response_patterns": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "type": "string"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": [\n                  "Response : \\uff5fnewline\\uff60"\n               ],\n               "description": "Response pattern to locate the end of the prompt.",\n               "title": "Response Patterns"\n            }\n         },\n         "title": "InsertMaskBeforePlaceholderConfig",\n         "type": "object"\n      },\n      "NestedAllTransformsConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "switchout": {\n               "$ref": "#/$defs/SwitchOutConfig",\n               "default": {\n                  "switchout_temperature": 1.0\n               }\n            },\n            "tokendrop": {\n               "$ref": "#/$defs/TokenDropConfig",\n               "default": {\n                  "tokendrop_temperature": 1.0\n               }\n            },\n            "tokenmask": {\n               "$ref": "#/$defs/TokenMaskConfig",\n               "default": {\n                  "tokenmask_temperature": 1.0\n               }\n            },\n            "sentencepiece": {\n               "$ref": "#/$defs/BaseTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0\n               }\n            },\n            "bpe": {\n               "$ref": "#/$defs/BaseTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0\n               }\n            },\n            "onmt_tokenize": {\n               "$ref": "#/$defs/ONMTTokenizerConfig",\n               "default": {\n                  "src_subword_model": null,\n                  "tgt_subword_model": null,\n                  "src_subword_nbest": 1,\n                  "tgt_subword_nbest": 1,\n                  "src_subword_alpha": 0.0,\n                  "tgt_subword_alpha": 0.0,\n                  "src_subword_vocab": "",\n                  "tgt_subword_vocab": "",\n                  "src_vocab_threshold": 0,\n                  "tgt_vocab_threshold": 0,\n                  "src_subword_type": "none",\n                  "tgt_subword_type": "none",\n                  "src_onmttok_kwargs": {\n                     "mode": "none"\n                  },\n                  "tgt_onmttok_kwargs": {\n                     "mode": "none"\n                  },\n                  "gpt2_pretok": false,\n                  "mapped_tokens": null\n               }\n            },\n            "inlinetags": {\n               "$ref": "#/$defs/InlineTagsConfig",\n               "default": {\n                  "tags_dictionary_path": null,\n                  "tags_corpus_ratio": 0.1,\n                  "max_tags": 12,\n                  "paired_stag": "\\uff5fph_#_beg\\uff60",\n                  "paired_etag": "\\uff5fph_#_end\\uff60",\n                  "isolated_tag": "\\uff5fph_#_std\\uff60",\n                  "src_delimiter": "\\uff5ffuzzy\\uff60"\n               }\n            },\n            "huggingface_tokenize": {\n               "$ref": "#/$defs/HuggingfaceTokenizerConfig",\n               "default": {\n                  "path": null,\n                  "huggingface_model": null,\n                  "max_length": null\n               }\n            },\n            "uppercase": {\n               "$ref": "#/$defs/UpperCaseConfig",\n               "default": {\n                  "upper_corpus_ratio": 0.01\n               }\n            },\n            "bart": {\n               "$ref": "#/$defs/BARTNoiseConfig",\n               "default": {\n                  "permute_sent_ratio": 0.0,\n                  "rotate_ratio": 0.0,\n                  "insert_ratio": 0.0,\n                  "random_ratio": 0.0,\n                  "mask_ratio": 0.0,\n                  "mask_length": "subword",\n                  "poisson_lambda": 3.0,\n                  "replace_length": -1\n               }\n            },\n            "docify": {\n               "$ref": "#/$defs/DocifyConfig",\n               "default": {\n                  "doc_length": 200,\n                  "max_context": 1\n               }\n            },\n            "normalize": {\n               "$ref": "#/$defs/NormalizeConfig",\n               "default": {\n                  "src_lang": "",\n                  "tgt_lang": "",\n                  "penn": true,\n                  "norm_quote_commas": true,\n                  "norm_numbers": true,\n                  "pre_replace_unicode_punct": false,\n                  "post_remove_control_chars": false\n               }\n            },\n            "terminology": {\n               "$ref": "#/$defs/TerminologyConfig",\n               "default": {\n                  "termbase_path": null,\n                  "src_spacy_language_model": null,\n                  "tgt_spacy_language_model": null,\n                  "term_corpus_ratio": 0.3,\n                  "term_example_ratio": 0.2,\n                  "src_term_stoken": "\\uff5fsrc_term_start\\uff60",\n                  "tgt_term_stoken": "\\uff5ftgt_term_start\\uff60",\n                  "tgt_term_etoken": "\\uff5ftgt_term_end\\uff60",\n                  "term_source_delimiter": "\\uff5ffuzzy\\uff60"\n               }\n            },\n            "clean": {\n               "$ref": "#/$defs/CleanConfig",\n               "default": {\n                  "src_eq_tgt": false,\n                  "same_char": false,\n                  "same_word": false,\n                  "scripts_ok": [\n                     "Latin",\n                     "Common"\n                  ],\n                  "scripts_nok": [],\n                  "src_tgt_ratio": 2.0,\n                  "avg_tok_min": 3.0,\n                  "avg_tok_max": 20.0,\n                  "langid": []\n               }\n            },\n            "filtertoolong": {\n               "$ref": "#/$defs/FilterTooLongConfig",\n               "default": {\n                  "src_seq_length": 192,\n                  "tgt_seq_length": 192\n               }\n            },\n            "prefix": {\n               "$ref": "#/$defs/PrefixConfig",\n               "default": {\n                  "src_prefix": "",\n                  "tgt_prefix": ""\n               }\n            },\n            "suffix": {\n               "$ref": "#/$defs/SuffixConfig",\n               "default": {\n                  "src_suffix": "",\n                  "tgt_suffix": ""\n               }\n            },\n            "insert_mask_before_placeholder": {\n               "$ref": "#/$defs/InsertMaskBeforePlaceholderConfig",\n               "default": {\n                  "response_patterns": [\n                     "Response : \\uff5fnewline\\uff60"\n                  ]\n               }\n            }\n         },\n         "title": "NestedAllTransformsConfig",\n         "type": "object"\n      },\n      "NormalizeConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Source language code",\n               "title": "Src Lang"\n            },\n            "tgt_lang": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Target language code",\n               "title": "Tgt Lang"\n            },\n            "penn": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Penn substitution",\n               "title": "Penn"\n            },\n            "norm_quote_commas": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Normalize quotations and commas",\n               "title": "Norm Quote Commas"\n            },\n            "norm_numbers": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": true,\n               "description": "Normalize numbers",\n               "title": "Norm Numbers"\n            },\n            "pre_replace_unicode_punct": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Replace unicode punct",\n               "title": "Pre Replace Unicode Punct"\n            },\n            "post_remove_control_chars": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Remove control chars",\n               "title": "Post Remove Control Chars"\n            }\n         },\n         "title": "NormalizeConfig",\n         "type": "object"\n      },\n      "ONMTTokenizerConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for src (or shared).",\n               "title": "Src Subword Model"\n            },\n            "tgt_subword_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path of subword model for tgt.",\n               "title": "Tgt Subword Model"\n            },\n            "src_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (source side)",\n               "title": "Src Subword Nbest"\n            },\n            "tgt_subword_nbest": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1,\n               "description": "Number of candidates in subword regularization. Valid for unigram sampling, invalid for BPE-dropout. (target side)",\n               "title": "Tgt Subword Nbest"\n            },\n            "src_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (source side)",\n               "title": "Src Subword Alpha"\n            },\n            "tgt_subword_alpha": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Smoothing parameter for sentencepiece unigram sampling, and dropout probability for BPE-dropout. (target side)",\n               "title": "Tgt Subword Alpha"\n            },\n            "src_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for src subword. Format: <word>\\\\t<count> per line.",\n               "title": "Src Subword Vocab"\n            },\n            "tgt_subword_vocab": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "Path to the vocabulary file for tgt subword. Format: <word>\\\\t<count> per line.",\n               "title": "Tgt Subword Vocab"\n            },\n            "src_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce src subword in src_subword_vocab with frequency >= src_vocab_threshold.",\n               "title": "Src Vocab Threshold"\n            },\n            "tgt_vocab_threshold": {\n               "anyOf": [\n                  {\n                     "type": "integer"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0,\n               "description": "Only produce tgt subword in tgt_subword_vocab with frequency >= tgt_vocab_threshold.",\n               "title": "Tgt Vocab Threshold"\n            },\n            "src_subword_type": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "none",\n                        "sentencepiece",\n                        "bpe"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "none",\n               "description": "Type of subword model for src (or shared) in pyonmttok.",\n               "title": "Src Subword Type"\n            },\n            "tgt_subword_type": {\n               "anyOf": [\n                  {\n                     "enum": [\n                        "none",\n                        "sentencepiece",\n                        "bpe"\n                     ],\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "none",\n               "description": "Type of subword model for tgt in pyonmttok.",\n               "title": "Tgt Subword Type"\n            },\n            "src_onmttok_kwargs": {\n               "anyOf": [\n                  {\n                     "type": "object"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": {\n                  "mode": "none"\n               },\n               "description": "Other pyonmttok options for src in dict string, except subword related options listed earlier.",\n               "title": "Src Onmttok Kwargs"\n            },\n            "tgt_onmttok_kwargs": {\n               "anyOf": [\n                  {\n                     "type": "object"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": {\n                  "mode": "none"\n               },\n               "description": "Other pyonmttok options for tgt in dict string, except subword related options listed earlier.",\n               "title": "Tgt Onmttok Kwargs"\n            },\n            "gpt2_pretok": {\n               "anyOf": [\n                  {\n                     "type": "boolean"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": false,\n               "description": "Preprocess sentence with byte-level mapping.",\n               "title": "Gpt2 Pretok"\n            },\n            "mapped_tokens": {\n               "anyOf": [\n                  {\n                     "items": {\n                        "maxItems": 2,\n                        "minItems": 2,\n                        "prefixItems": [\n                           {\n                              "type": "string"\n                           },\n                           {\n                              "type": "string"\n                           }\n                        ],\n                        "type": "array"\n                     },\n                     "type": "array"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Mapped tokens for placeholders preservation",\n               "title": "Mapped Tokens"\n            }\n         },\n         "title": "ONMTTokenizerConfig",\n         "type": "object"\n      },\n      "PrefixConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to prepend to all source examples.",\n               "title": "Src Prefix"\n            },\n            "tgt_prefix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to prepend to all target examples.",\n               "title": "Tgt Prefix"\n            }\n         },\n         "title": "PrefixConfig",\n         "type": "object"\n      },\n      "SuffixConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "src_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to append to all source examples.",\n               "title": "Src Suffix"\n            },\n            "tgt_suffix": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "",\n               "description": "String to append to all target examples.",\n               "title": "Tgt Suffix"\n            }\n         },\n         "title": "SuffixConfig",\n         "type": "object"\n      },\n      "SwitchOutConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "switchout_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for SwitchOut. :math:`\\\\tau^{-1}` in :cite:`DBLP:journals/corr/abs-1808-07512`. Smaller value makes data more diverse.",\n               "title": "Switchout Temperature"\n            }\n         },\n         "title": "SwitchOutConfig",\n         "type": "object"\n      },\n      "TerminologyConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "termbase_path": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Path to a dictionary file with terms.",\n               "title": "Termbase Path"\n            },\n            "src_spacy_language_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Name of the spaCy language model for the source corpus.",\n               "title": "Src Spacy Language Model"\n            },\n            "tgt_spacy_language_model": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": null,\n               "description": "Name of the spaCy language model for the target corpus.",\n               "title": "Tgt Spacy Language Model"\n            },\n            "term_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.3,\n               "description": "Ratio of corpus to augment with terms.",\n               "title": "Term Corpus Ratio"\n            },\n            "term_example_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.2,\n               "description": "Maximum terms allowed in an example.",\n               "title": "Term Example Ratio"\n            },\n            "src_term_stoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5fsrc_term_start\\uff60",\n               "description": "The source term start token.",\n               "title": "Src Term Stoken"\n            },\n            "tgt_term_stoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ftgt_term_start\\uff60",\n               "description": "The target term start token.",\n               "title": "Tgt Term Stoken"\n            },\n            "tgt_term_etoken": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ftgt_term_end\\uff60",\n               "description": "The target term end token.",\n               "title": "Tgt Term Etoken"\n            },\n            "term_source_delimiter": {\n               "anyOf": [\n                  {\n                     "type": "string"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": "\\uff5ffuzzy\\uff60",\n               "description": "Any special token used for augmented source sentences. The default is the fuzzy token used in the FuzzyMatch transform.",\n               "title": "Term Source Delimiter"\n            }\n         },\n         "title": "TerminologyConfig",\n         "type": "object"\n      },\n      "TokenDropConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tokendrop_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for token deletion.",\n               "title": "Tokendrop Temperature"\n            }\n         },\n         "title": "TokenDropConfig",\n         "type": "object"\n      },\n      "TokenMaskConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "tokenmask_temperature": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 1.0,\n               "description": "Sampling temperature for token masking.",\n               "title": "Tokenmask Temperature"\n            }\n         },\n         "title": "TokenMaskConfig",\n         "type": "object"\n      },\n      "UpperCaseConfig": {\n         "additionalProperties": false,\n         "properties": {\n            "upper_corpus_ratio": {\n               "anyOf": [\n                  {\n                     "type": "number"\n                  },\n                  {\n                     "type": "null"\n                  }\n               ],\n               "default": 0.01,\n               "description": "Corpus ratio to apply uppercasing.",\n               "title": "Upper Corpus Ratio"\n            }\n         },\n         "title": "UpperCaseConfig",\n         "type": "object"\n      }\n   },\n   "required": [\n      "src_vocab",\n      "data"\n   ]\n}\n'})}),"\n"]}),(0,i.jsx)(e.p,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Config:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_assignment"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"validate_default"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"use_enum_values"}),": ",(0,i.jsx)(e.em,{children:"bool = True"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"extra"}),": ",(0,i.jsx)(e.em,{children:"str = ignore"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"protected_namespaces"}),": ",(0,i.jsx)(e.em,{children:"tuple = ()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fields:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.BuildVocabConfig.dump_samples",children:(0,i.jsx)(e.code,{children:"dump_samples (bool)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.BuildVocabConfig.learn_subwords",children:(0,i.jsx)(e.code,{children:"learn_subwords (bool)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.BuildVocabConfig.learn_subwords_size",children:(0,i.jsx)(e.code,{children:"learn_subwords_size (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.BuildVocabConfig.n_sample",children:(0,i.jsx)(e.code,{children:"n_sample (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.BuildVocabConfig.num_threads",children:(0,i.jsx)(e.code,{children:"num_threads (int)"})})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#eole.config.run.BuildVocabConfig.vocab_sample_queue_size",children:(0,i.jsx)(e.code,{children:"vocab_sample_queue_size (int)"})})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validators:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"_validate_build_vocab_config"})," \xbb ",(0,i.jsx)(e.code,{children:"all fields"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-dump_samples--bool--false",children:[(0,i.jsx)(e.em,{children:"field"})," dump_samples ",(0,i.jsx)(e.em,{children:": bool"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsx)(e.p,{children:"Dump samples when building vocabulary. Warning: this may slow down the process."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_build_vocab_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-learn_subwords--bool--false",children:[(0,i.jsx)(e.em,{children:"field"})," learn_subwords ",(0,i.jsx)(e.em,{children:": bool"})," ",(0,i.jsx)(e.em,{children:"= False"})]}),"\n",(0,i.jsx)(e.p,{children:"Learn subwords (based on defined transforms) prior to building vocabulary."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_build_vocab_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-learn_subwords_size--int--32000",children:[(0,i.jsx)(e.em,{children:"field"})," learn_subwords_size ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 32000"})]}),"\n",(0,i.jsx)(e.p,{children:"Number of subwords operations to learn."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_build_vocab_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-n_sample--int--5000",children:[(0,i.jsx)(e.em,{children:"field"})," n_sample ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 5000"})]}),"\n",(0,i.jsx)(e.p,{children:"Number of transformed samples per corpus to use to build the vocabulary. Set to -1 to use the full corpora."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_build_vocab_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-num_threads--int--1",children:[(0,i.jsx)(e.em,{children:"field"})," num_threads ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 1"})]}),"\n",(0,i.jsx)(e.p,{children:"Number of parallel threads to build the vocabulary."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_build_vocab_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"field-vocab_sample_queue_size--int--20",children:[(0,i.jsx)(e.em,{children:"field"})," vocab_sample_queue_size ",(0,i.jsx)(e.em,{children:": int"})," ",(0,i.jsx)(e.em,{children:"= 20"})]}),"\n",(0,i.jsx)(e.p,{children:"Size of queues used for dumping samples."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validated by:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_maybe_set_huggingface_model"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"_validate_build_vocab_config"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"model_post_initcontext-any--2",children:"model_post_init(context: Any, /)"}),"\n",(0,i.jsx)(e.p,{children:"We need to both initialize private attributes and call the user-defined model_post_init\nmethod."})]})}function c(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(f,{...n})}):f(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function a(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);